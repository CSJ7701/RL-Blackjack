(undo-tree-save-format-version . 1)
"b0b14c7433a56e8879ae837b1fc565c75bf95125"
[nil nil nil nil (26387 33900 462109 923000) 0 nil]
([nil nil ((1 . 2) (t 26387 33900 462986 286000)) nil (26387 33954 667683 23000) 0 nil])
([nil nil ((2 . 13)) nil (26387 33954 667681 941000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -12) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) 13) nil (26387 33954 667680 819000) 0 nil])
([nil nil ((12 . 14)) nil (26387 33954 667676 210000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -13) (undo-tree-id368 . -1) 14) nil (26387 33954 667675 529000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 12) (undo-tree-id367 . -1) 13) nil (26387 33954 667674 857000) 0 nil])
([nil nil ((12 . 13)) nil (26387 33954 667674 266000) 0 nil])
([nil nil ((13 . 18)) nil (26387 33954 667673 996000) 0 nil])
([nil nil ((18 . 25)) nil (26387 33954 667673 725000) 0 nil])
([nil nil ((25 . 30)) nil (26387 33954 667673 435000) 0 nil])
([nil nil ((#("_" 0 1 (face py-def-face fontified t)) . -29) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) 30) nil (26387 33954 667672 894000) 0 nil])
([nil nil ((29 . 32)) nil (26387 33954 667671 180000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -31) (undo-tree-id362 . -1) 32) nil (26387 33954 667670 739000) 0 nil])
([nil nil ((31 . 40)) nil (26387 33954 667670 198000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -37) (undo-tree-id359 . -1) (#("k" 0 1 (fontified t)) . -38) (undo-tree-id360 . -1) (#("s" 0 1 (fontified t)) . -39) (undo-tree-id361 . -1) 40) nil (26387 33954 667669 527000) 0 nil])
([nil nil ((37 . 40)) nil (26387 33954 667667 914000) 0 nil])
([nil nil ((31 . 35)) nil (26387 33954 667667 503000) 0 nil])
([nil nil ((44 . 45)) nil (26387 33954 667666 812000) 0 nil])
([nil nil ((45 . 46)) nil (26387 33954 667666 331000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 45) (undo-tree-id358 . -1) 46) nil (26387 33954 667665 49000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -44) (undo-tree-id357 . -1) 45) nil (26387 33954 667664 217000) 0 nil])
([nil nil ((#("int " 0 3 (face py-builtins-face fontified t) 3 4 (fontified t)) . -31) (undo-tree-id356 . -4) 35) nil (26387 33954 667663 265000) 0 nil])
([nil nil ((40 . 41)) nil (26387 33954 667662 314000) 0 nil])
([nil nil ((41 . 51)) nil (26387 33954 667661 823000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 50) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 51) nil (26387 33954 667659 358000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -49) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) 50) nil (26387 33954 667573 35000) 0 nil])
([nil nil ((49 . 50)) nil (26387 33954 667382 224000) 0 nil])
([nil nil ((50 . 51)) nil (26387 33954 667381 963000) 0 nil])
([nil nil ((51 . 60)) nil (26387 33954 667381 422000) 0 nil])
([nil nil ((60 . 63)) nil (26387 33954 667380 851000) 0 nil])
([nil nil ((63 . 64)) nil (26387 33954 667376 633000) 0 nil])
([nil nil ((31 . 37) (t 26387 33954 669836 246000)) nil (26387 34414 529515 741000) 0 nil])
([nil nil ((71 . 79) (#("        " 0 8 (fontified nil)) . 70) (undo-tree-id622 . -8) (69 . 79)) nil (26387 34414 529514 879000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 75) (undo-tree-id621 . -4) 79) nil (26387 34414 529513 517000) 0 nil])
([nil nil ((75 . 81)) nil (26387 34414 529512 585000) 0 nil])
([nil nil ((#("c" 0 1 (face py-def-face fontified t)) . -79) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (#("r" 0 1 (face py-def-face fontified t)) . -80) (undo-tree-id620 . -1) 81) nil (26387 34414 529511 473000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 78) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) 79) nil (26387 34414 529509 299000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -75) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (#("e" 0 1 (fontified t)) . -76) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("f" 0 1 (face py-def-class-face fontified t)) . -77) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 78) nil (26387 34414 529506 684000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -71) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) 75) nil (26387 34414 529498 559000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -66) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#("." 0 1 (fontified t)) . -67) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("." 0 1 (fontified t)) . -68) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("
" 0 1 (fontified t)) . -69) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (#("
" 0 1 (fontified t)) . -70) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) 71) nil (26387 34414 529494 662000) 0 nil])
([nil nil ((66 . 71)) nil (26387 34414 529425 51000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -66) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#("u" 0 1 (fontified t)) . -67) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("m" 0 1 (fontified t)) . -68) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (#("_" 0 1 (fontified t)) . -69) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (#("2" 0 1 (fontified t)) . -70) (undo-tree-id562 . -1) 71) nil (26387 34414 529423 448000) 0 nil])
([nil nil ((60 . 68) (#("        " 0 8 (fontified nil)) . 59) (undo-tree-id539 . -8) (59 . 68) (#("        " 0 8 (fontified nil)) . 58) (undo-tree-id540 . -8) (undo-tree-id541 . -8) (undo-tree-id542 . -8) (undo-tree-id543 . -8) (undo-tree-id544 . -8) (undo-tree-id545 . -8) (66 . 67)) nil (26387 34414 529415 864000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 64) (undo-tree-id538 . -4) 68) nil (26387 34414 529411 736000) 0 nil])
([nil nil ((64 . 78)) nil (26387 34414 529410 133000) 0 nil])
([nil nil ((#("E" 0 1 (face py-def-face fontified t)) . -75) (undo-tree-id535 . -1) (#("x" 0 1 (face py-def-face fontified t)) . -76) (undo-tree-id536 . -1) (#("k" 0 1 (face py-def-face fontified t)) . -77) (undo-tree-id537 . -1) 78) nil (26387 34414 529409 91000) 0 nil])
([nil nil ((75 . 84)) nil (26387 34414 529406 947000) 0 nil])
([nil nil ((84 . 94)) nil (26387 34414 529406 196000) 0 nil])
([nil nil ((94 . 95)) nil (26387 34414 529405 575000) 0 nil])
([nil nil ((95 . 100)) nil (26387 34414 529405 94000) 0 nil])
([nil nil ((100 . 101)) nil (26387 34414 529404 52000) 0 nil])
([nil nil ((101 . 110)) nil (26387 34414 529403 331000) 0 nil])
([nil nil ((110 . 115)) nil (26387 34414 529402 659000) 0 nil])
([nil nil ((115 . 124)) nil (26387 34414 529401 998000) 0 nil])
([nil nil ((120 . 129) (#("num" 0 3 (fontified nil)) . -120) (120 . 123) (#("num_decks" 0 9 (fontified nil)) . -120) (120 . 129) (#("num_" 0 4 (fontified t)) . -120) (undo-tree-id531 . -4) (undo-tree-id532 . -4) (undo-tree-id533 . -4) (undo-tree-id534 . -4) 124) nil (26387 34414 529400 686000) 0 nil])
([nil nil ((129 . 138)) nil (26387 34414 529398 672000) 0 nil])
([nil nil ((138 . 141)) nil (26387 34414 529398 221000) 0 nil])
([nil nil ((141 . 152)) nil (26387 34414 529397 770000) 0 nil])
([nil nil ((148 . 157) (#("num" 0 3 (fontified nil)) . -148) (148 . 151) (#("num_decks" 0 9 (fontified nil)) . -148) (148 . 157) (#("num_" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -148) (undo-tree-id527 . -4) (undo-tree-id528 . -4) (undo-tree-id529 . -4) (undo-tree-id530 . -4) 152) nil (26387 34414 529396 678000) 0 nil])
([nil nil ((157 . 166)) nil (26387 34414 529393 983000) 0 nil])
([nil nil ((166 . 175)) nil (26387 34414 529393 352000) 0 nil])
([nil nil ((175 . 180)) nil (26387 34414 529392 681000) 0 nil])
([nil nil ((176 . 185) (#("num" 0 3 (fontified nil)) . -176) (176 . 179) (#("num_decks" 0 9 (fontified nil)) . -176) (176 . 185) (#("num_" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -176) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (undo-tree-id525 . -4) (undo-tree-id526 . -4) 180) nil (26387 34414 529391 108000) 0 nil])
([nil nil ((185 . 194)) nil (26387 34414 529387 90000) 0 nil])
([nil nil ((194 . 207)) nil (26387 34414 529385 918000) 0 nil])
([nil nil ((204 . 213) (#("num" 0 3 (fontified nil)) . -204) (204 . 207) (#("num_decks" 0 9 (fontified nil)) . -204) (204 . 213) (#("num" 0 3 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -204) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) 207) nil (26387 34414 529384 846000) 0 nil])
([nil nil ((213 . 222)) nil (26387 34414 529381 460000) 0 nil])
([nil nil ((222 . 226)) nil (26387 34414 529380 628000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -225) (undo-tree-id518 . -1) 226) nil (26387 34414 529379 626000) 0 nil])
([nil nil ((225 . 231)) nil (26387 34414 529378 364000) 0 nil])
([nil nil ((231 . 236)) nil (26387 34414 529377 322000) 0 nil])
([nil nil ((232 . 241) (#("num" 0 3 (fontified nil)) . -232) (232 . 235) (#("num_decks" 0 9 (fontified nil)) . -232) (232 . 241) (#("num_" 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -232) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) 236) nil (26387 34414 529375 899000) 0 nil])
([nil nil ((241 . 250)) nil (26387 34414 529372 824000) 0 nil])
([nil nil ((250 . 263)) nil (26387 34414 529372 182000) 0 nil])
([nil nil ((260 . 269) (#("num" 0 3 (fontified nil)) . -260) (260 . 263) (#("num_decks" 0 9 (fontified nil)) . -260) (260 . 269) (#("num" 0 3 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -260) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) 263) nil (26387 34414 529371 201000) 0 nil])
([nil nil ((269 . 278)) nil (26387 34414 529367 965000) 0 nil])
([nil nil ((278 . 290)) nil (26387 34414 529367 173000) 0 nil])
([nil nil ((288 . 297) (#("nu" 0 2 (fontified nil)) . -288) (288 . 290) (#("num_decks" 0 9 (fontified nil)) . -288) (288 . 297) (#("nu" 0 2 (fontified t match-data (0 3 0 1 1 2 2 3))) . -288) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) 290) nil (26387 34414 529365 790000) 0 nil])
([nil nil ((297 . 306)) nil (26387 34414 529362 594000) 0 nil])
([nil nil ((306 . 315)) nil (26387 34414 529361 412000) 0 nil])
([nil nil ((315 . 317)) nil (26387 34414 529360 611000) 0 nil])
([nil nil ((316 . 325) (#("n" 0 1 (fontified nil)) . -316) (316 . 317) (#("num_decks" 0 9 (fontified nil)) . -316) (316 . 325) (#("n" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -316) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) 317) nil (26387 34414 529359 559000) 0 nil])
([nil nil ((325 . 334)) nil (26387 34414 529354 740000) 0 nil])
([nil nil ((334 . 343)) nil (26387 34414 529354 159000) 0 nil])
([nil nil ((343 . 350)) nil (26387 34414 529353 487000) 0 nil])
([nil nil ((346 . 355) (#("num" 0 3 (fontified nil)) . -346) (346 . 349) (#("num_decks" 0 9 (fontified nil)) . -346) (346 . 355) (#("num_" 0 4 (fontified t match-data (0 1 0 1))) . -346) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) 350) nil (26387 34414 529352 15000) 0 nil])
([nil nil ((355 . 364)) nil (26387 34414 529349 300000) 0 nil])
([nil nil ((364 . 377)) nil (26387 34414 529347 737000) 0 nil])
([nil nil ((374 . 383) (#("num" 0 3 (fontified nil)) . -374) (374 . 377) (#("num_decks" 0 9 (fontified nil)) . -374) (374 . 383) (#("num" 0 3 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -374) (undo-tree-id374 . -3) (undo-tree-id375 . -3) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -2) (undo-tree-id432 . -2) (undo-tree-id433 . -2) (undo-tree-id434 . -2) (undo-tree-id435 . -2) (undo-tree-id436 . -2) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -2) (undo-tree-id447 . -2) (undo-tree-id448 . -2) (undo-tree-id449 . -2) (undo-tree-id450 . -2) (undo-tree-id451 . -2) (undo-tree-id452 . -2) (undo-tree-id453 . -2) (undo-tree-id454 . -2) (undo-tree-id455 . -2) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -3) (undo-tree-id471 . -3) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -3) (undo-tree-id475 . -3) (undo-tree-id476 . -3) (undo-tree-id477 . -3) (undo-tree-id478 . -3) (undo-tree-id479 . -3) (undo-tree-id480 . -3) (undo-tree-id481 . -3) (undo-tree-id482 . -3) (undo-tree-id483 . -3) (undo-tree-id484 . -3) (undo-tree-id485 . -3) (undo-tree-id486 . -3) (undo-tree-id487 . -3) (undo-tree-id488 . -3) (undo-tree-id489 . -3) (undo-tree-id490 . -3) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) 377) nil (26387 34414 529341 966000) 0 nil])
([nil nil ((100 . 107) (t 26387 34414 531343 279000)) nil (26387 34447 929558 594000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -106) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) 107) nil (26387 34447 929557 51000) 0 nil])
([nil nil ((106 . 108)) nil (26387 34447 929553 695000) 0 nil])
([nil nil ((104 . 108) (#("dict" 0 4 (fontified nil)) . -104) (104 . 108) (#("dict" 0 4 (face py-builtins-face fontified t)) . -104) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) 108) nil (26387 34447 929552 82000) 0 nil])
([nil nil ((108 . 121)) nil (26387 34447 929535 802000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -109) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (#("t" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -110) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (#("r" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -111) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -112) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("n" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -113) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (#("g" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -114) (undo-tree-id713 . -1) (undo-tree-id714 . -1) 115 (t 26387 34447 932197 519000)) nil (26387 34659 933763 622000) 0 nil])
([nil nil ((109 . 115)) nil (26387 34659 933757 561000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -112) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#("n" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -113) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("g" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -114) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) 115) nil (26387 34659 933756 398000) 0 nil])
([nil nil ((109 . 112) (#("str" 0 3 (fontified nil)) . -109) (109 . 112) (#("str" 0 3 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -109) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) 112) nil (26387 34659 933751 319000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 108) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1)) nil (26387 34659 933749 315000) 0 nil])
([nil nil ((108 . 109)) nil (26387 34659 933747 171000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -117) (undo-tree-id680 . -1) 118) nil (26387 34659 933746 480000) 0 nil])
([nil nil ((117 . 118)) nil (26387 34659 933745 568000) 0 nil])
([nil nil ((402 . 410)) nil (26387 34659 933745 247000) 0 nil])
([nil nil ((410 . 417)) nil (26387 34659 933744 787000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 416) (undo-tree-id679 . -1) 417) nil (26387 34659 933744 55000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -415) (undo-tree-id678 . -1) 416) nil (26387 34659 933743 364000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 414) (undo-tree-id677 . -1) 415) nil (26387 34659 933742 482000) 0 nil])
([nil nil ((414 . 423)) nil (26387 34659 933741 621000) 0 nil])
([nil nil ((423 . 429)) nil (26387 34659 933741 290000) 0 nil])
([nil nil ((429 . 430)) nil (26387 34659 933740 849000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -425) (undo-tree-id672 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -426) (undo-tree-id673 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -427) (undo-tree-id674 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . -428) (undo-tree-id675 . -1) (#(":" 0 1 (fontified t)) . -429) (undo-tree-id676 . -1) 430) nil (26387 34659 933739 577000) 0 nil])
([nil nil ((425 . 429)) nil (26387 34659 933736 832000) 0 nil])
([nil nil ((429 . 430)) nil (26387 34659 933736 140000) 0 nil])
([nil nil ((430 . 433)) nil (26387 34659 933735 740000) 0 nil])
([nil nil ((430 . 435) (#("num" 0 3 (fontified nil)) . -430) (430 . 433) (#("num_2" 0 5 (fontified nil)) . -430) (430 . 435) (#("num" 0 3 (fontified t)) . -430) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) 433) nil (26387 34659 933734 768000) 0 nil])
([nil nil ((435 . 444)) nil (26387 34659 933731 802000) 0 nil])
([nil nil ((444 . 445)) nil (26387 34659 933731 391000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -437) (undo-tree-id660 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -438) (undo-tree-id661 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -439) (undo-tree-id662 . -1) (#("r" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -440) (undo-tree-id663 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -441) (undo-tree-id664 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -442) (undo-tree-id665 . -1) (#("'" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -443) (undo-tree-id666 . -1) (#(":" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -444) (undo-tree-id667 . -1) 445) nil (26387 34659 933729 558000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 436) (undo-tree-id659 . -1) 437) nil (26387 34659 933725 260000) 0 nil])
([nil nil ((436 . 449)) nil (26387 34659 933724 529000) 0 nil])
([nil nil ((#("        num_2 = 4*num_decks
        num_3 = 4*num_decks
        num_4 = 4*num_decks
        num_5 = 4*num_decks
        num_6 = 4*num_decks
        num_7 = 4*num_decks
        num_8 = 4*num_decks
        num_9 = 4*num_decks
        num_10 = 16*num_decks
        num_A = 4*num_decks
        dictionary = {'two':num_2," 0 8 (fontified t) 8 13 (face py-variable-name-face fontified t) 13 14 (fontified t) 14 15 (face font-lock-operator-face fontified t) 15 16 (fontified t) 16 17 (face py-number-face fontified t) 17 18 (fontified t) 18 28 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 28 36 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 36 41 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 41 42 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 42 43 (face font-lock-operator-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 43 44 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 44 45 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 45 46 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 46 56 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 56 64 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 64 69 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 69 70 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 70 71 (face font-lock-operator-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 71 72 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 72 73 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 73 74 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 74 84 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 84 92 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 92 97 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 97 98 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 98 99 (face font-lock-operator-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 99 100 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 100 101 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 101 102 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 102 112 (fontified t match-data (0 3 0 1 1 2 2 3)) 112 120 (fontified t match-data (0 3 0 1 1 2 2 3)) 120 125 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3)) 125 126 (fontified t match-data (0 3 0 1 1 2 2 3)) 126 127 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3)) 127 128 (fontified t match-data (0 3 0 1 1 2 2 3)) 128 129 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 129 130 (fontified t match-data (0 3 0 1 1 2 2 3)) 130 140 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 140 148 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 148 153 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 153 154 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 154 155 (face font-lock-operator-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 155 156 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 156 157 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 157 158 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 158 168 (fontified t match-data (0 3 0 1 1 2 2 3)) 168 176 (fontified t match-data (0 3 0 1 1 2 2 3)) 176 181 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3)) 181 182 (fontified t match-data (0 3 0 1 1 2 2 3)) 182 183 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3)) 183 184 (fontified t match-data (0 3 0 1 1 2 2 3)) 184 185 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 185 186 (fontified t match-data (0 3 0 1 1 2 2 3)) 186 196 (fontified t match-data (0 2 0 1 1 2)) 196 204 (fontified t match-data (0 2 0 1 1 2)) 204 209 (face py-variable-name-face fontified t match-data (0 2 0 1 1 2)) 209 210 (fontified t match-data (0 2 0 1 1 2)) 210 211 (face font-lock-operator-face fontified t match-data (0 2 0 1 1 2)) 211 212 (fontified t match-data (0 2 0 1 1 2)) 212 213 (face py-number-face fontified t match-data (0 2 0 1 1 2)) 213 214 (fontified t match-data (0 2 0 1 1 2)) 214 224 (fontified t match-data (0 1 0 1)) 224 232 (fontified t match-data (0 1 0 1)) 232 238 (face py-variable-name-face fontified t match-data (0 1 0 1)) 238 239 (fontified t match-data (0 1 0 1)) 239 240 (face font-lock-operator-face fontified t match-data (0 1 0 1)) 240 241 (fontified t match-data (0 1 0 1)) 241 243 (face py-number-face fontified t match-data (0 1 0 1)) 243 244 (fontified t match-data (0 1 0 1)) 244 254 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 254 262 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 262 267 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 267 268 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 268 269 (face font-lock-operator-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 269 270 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 270 271 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 271 272 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 272 281 (fontified t match-data (0 3 0 1 1 2 2 3)) 281 282 (fontified t) 282 290 (fontified t) 290 300 (face py-variable-name-face fontified t) 300 301 (fontified t) 301 302 (face font-lock-operator-face fontified t) 302 303 (fontified t) 303 304 (face (rainbow-delimiters-depth-1-face) fontified t) 304 309 (face font-lock-string-face fontified t) 309 310 (fontified t) 310 316 (fontified t match-data (0 3 0 1 1 2 2 3))) . 120) (undo-tree-id651 . -310) (undo-tree-id652 . -310) (undo-tree-id653 . -310) (undo-tree-id654 . -316) (undo-tree-id655 . -129) (undo-tree-id656 . -282) (undo-tree-id657 . -316) (undo-tree-id658 . -310)) nil (26387 34659 933723 777000) 0 nil])
([nil nil ((120 . 128)) nil (26387 34659 933719 840000) 0 nil])
([nil nil ((128 . 133)) nil (26387 34659 933719 319000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -128) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("a" 0 1 (fontified t)) . -129) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("r" 0 1 (fontified t)) . -130) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#("d" 0 1 (fontified t)) . -131) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (#("s" 0 1 (fontified t)) . -132) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) 133) nil (26387 34659 933717 726000) 0 nil])
([nil nil ((nil rear-nonsticky nil 434 . 435) (nil fontified nil 128 . 435) (128 . 435)) nil (26387 34659 933698 730000) 0 nil])
([nil nil ((147 . 155) (#("    " 0 4 (fontified t)) . 147) 153) nil (26387 34659 933697 879000) 0 nil])
([nil nil ((200 . 208) (#("    " 0 4 (fontified t)) . 200) 206) nil (26387 34659 933697 177000) 0 nil])
([nil nil ((253 . 261) (#("    " 0 4 (fontified t)) . 253) 259) nil (26387 34659 933696 135000) 0 nil])
([nil nil ((315 . 319) 316) nil (26387 34659 933695 494000) 0 nil])
([nil nil ((322 . 326) 331) nil (26387 34659 933694 953000) 0 nil])
([nil nil ((380 . 384) 389) nil (26387 34659 933694 462000) 0 nil])
([nil nil ((322 . 330) (#("    " 0 4 (fontified t)) . 322) 344) nil (26387 34659 933693 691000) 0 nil])
([nil nil ((384 . 392) (#("    " 0 4 (fontified t)) . 384) 406) nil (26387 34659 933692 989000) 0 nil])
([nil nil ((147 . 159) (#("        " 0 8 (fontified t)) . 147) 159) nil (26387 34659 933692 8000) 0 nil])
([nil nil ((204 . 216) (#("        " 0 8 (fontified t)) . 204) 220) nil (26387 34659 933691 246000) 0 nil])
([nil nil ((261 . 273) (#("        " 0 8 (fontified t)) . 261) 281) nil (26387 34659 933690 515000) 0 nil])
([nil nil ((327 . 335) (#("    " 0 4 (fontified t)) . 327) 332) nil (26387 34659 933689 252000) 0 nil])
([nil nil ((496 . 497) 336) nil (26387 34659 933684 594000) 0 nil])
([nil nil ((58 . 66) (t 26387 34659 936070 137000)) nil (26387 35127 391285 656000) 0 nil])
([nil nil ((66 . 69)) nil (26387 35127 391284 364000) 0 nil])
([nil nil ((494 . 502)) nil (26387 35127 391283 662000) 0 nil])
([nil nil ((502 . 514)) nil (26387 35127 391282 821000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -513) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) 514) nil (26387 35127 391278 713000) 0 nil])
([nil nil ((529 . 533) (#("    " 0 4 (fontified nil)) . 528) (undo-tree-id815 . -4) (527 . 533) (t 26387 35127 393948 210000)) nil (26387 35190 564687 874000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -529) (undo-tree-id814 . -4) 533) nil (26387 35190 564686 281000) 0 nil])
([nil nil ((529 . 535)) nil (26387 35190 564685 279000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -532) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("a" 0 1 (fontified t)) . -533) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("m" 0 1 (fontified t)) . -534) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) 535) nil (26387 35190 564684 297000) 0 nil])
([nil nil ((532 . 544)) nil (26387 35190 564680 109000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -543) (undo-tree-id801 . -1) 544) nil (26387 35190 564679 739000) 0 nil])
([nil nil ((543 . 552)) nil (26387 35190 564679 107000) 0 nil])
([nil nil ((552 . 553)) nil (26387 35190 564678 817000) 0 nil])
([nil nil ((553 . 558)) nil (26387 35190 564678 576000) 0 nil])
([nil nil ((544 . 545)) nil (26387 35190 564678 336000) 0 nil])
([nil nil ((553 . 554)) nil (26387 35190 564678 65000) 0 nil])
([nil nil ((560 . 563)) nil (26387 35190 564677 805000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -560) (undo-tree-id798 . -1) (#("." 0 1 (fontified t)) . -561) (undo-tree-id799 . -1) (#("." 0 1 (fontified t)) . -562) (undo-tree-id800 . -1) 563) nil (26387 35190 564677 24000) 0 nil])
([nil nil ((560 . 573)) nil (26387 35190 564675 491000) 0 nil])
([nil nil ((573 . 578)) nil (26387 35190 564675 240000) 0 nil])
([nil nil ((578 . 588)) nil (26387 35190 564674 980000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -586) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("e" 0 1 (fontified t)) . -587) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) 588) nil (26387 35190 564674 308000) 0 nil])
([nil nil ((586 . 595)) nil (26387 35190 564669 559000) 0 nil])
([nil nil ((#("    test.createDeck()" 0 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t)) . 574) (undo-tree-id785 . -9) (undo-tree-id786 . -19) (undo-tree-id787 . -19) (undo-tree-id788 . -20) (undo-tree-id789 . -20)) nil (26387 35190 564669 28000) 0 nil])
([nil nil ((574 . 578)) nil (26387 35190 564666 694000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -66) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (#("." 0 1 (fontified t)) . -67) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (#("." 0 1 (fontified t)) . -68) (undo-tree-id783 . -1) (undo-tree-id784 . -1) 69) nil (26387 35190 564665 812000) 0 nil])
([nil nil ((66 . 72)) nil (26387 35190 564663 197000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -66) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (#("r" 0 1 (fontified t)) . -67) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (#("e" 0 1 (fontified t)) . -68) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("a" 0 1 (fontified t)) . -69) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (#("t" 0 1 (fontified t)) . -70) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#("e" 0 1 (fontified t)) . -71) (undo-tree-id778 . -1) 72) nil (26387 35190 564661 795000) 0 nil])
([nil nil ((66 . 71)) nil (26387 35190 564653 189000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -69) (undo-tree-id756 . -1) (#("." 0 1 (fontified t)) . -70) (undo-tree-id757 . -1) 71) nil (26387 35190 564652 688000) 0 nil])
([nil nil ((69 . 74)) nil (26387 35190 564651 45000) 0 nil])
([nil nil ((71 . 81) (#("cr" 0 2 (fontified nil)) . -71) (71 . 73) (#("createDeck" 0 10 (fontified nil)) . -71) (71 . 81) (#("cre" 0 3 (fontified t)) . -71) (undo-tree-id752 . -3) (undo-tree-id753 . -3) (undo-tree-id754 . -3) (undo-tree-id755 . -3) 74) nil (26387 35190 564650 23000) 0 nil])
([nil nil ((81 . 83)) nil (26387 35190 564647 568000) 0 nil])
([nil nil ((83 . 85)) nil (26387 35190 564647 277000) 0 nil])
([nil nil ((82 . 91) (#("num" 0 3 (fontified nil)) . -82) (82 . 85) (#("num_decks" 0 9 (fontified nil)) . -82) (82 . 91) (#("num" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -82) (undo-tree-id748 . -3) (undo-tree-id749 . -3) (undo-tree-id750 . -3) (undo-tree-id751 . -3) 85) nil (26387 35190 564646 416000) 0 nil])
([nil nil ((91 . 92)) nil (26387 35190 564642 619000) 0 nil])
([nil nil ((58 . 66) (#("        " 0 8 (fontified t)) . 58) (undo-tree-id747 . -8)) nil (26387 35190 564641 967000) 0 nil])
([nil nil ((66 . 78)) nil (26387 35190 564633 572000) 0 nil])
([nil nil ((613 . 614) 78) nil (26387 35190 564628 833000) 0 nil])
([nil nil ((608 . 613) (t 26387 35190 566540 718000)) nil (26387 35200 437717 80000) 0 nil])
([nil nil ((613 . 618)) nil (26387 35200 437716 639000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -613) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (#("e" 0 1 (fontified t)) . -614) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (#("s" 0 1 (fontified t)) . -615) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (#("t" 0 1 (fontified t)) . -616) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (#("." 0 1 (fontified t)) . -617) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) 618) nil (26387 35200 437714 806000) 0 nil])
([nil nil ((613 . 629)) nil (26387 35200 437687 464000) 0 nil])
([nil nil ((607 . 608) (t 26387 35200 439636 316000)) nil (26387 35309 931291 21000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -607) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) 608 (t 26387 35309 941744 852000)) nil (26387 35322 615493 837000) 0 nil])
([nil nil ((1 . 3) (t 26387 35322 627878 531000)) nil (26387 35423 290170 138000) 0 nil])
([nil nil ((1 . 22)) nil (26387 35423 290169 417000) 0 nil])
([nil nil ((22 . 41)) nil (26387 35423 290168 736000) 0 nil])
([nil nil ((#("from numpy import numpy.random as random" 0 4 (face py-import-from-face fontified t) 4 11 (fontified t) 11 17 (face py-import-from-face fontified t) 17 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 40 (fontified t)) . 1) (undo-tree-id1494 . -34) (undo-tree-id1495 . -37) (undo-tree-id1496 . -37) (undo-tree-id1497 . -27) (undo-tree-id1498 . -37)) nil (26387 35423 290167 503000) 0 nil])
([nil nil ((1 . 14)) nil (26387 35423 290104 535000) 0 nil])
([nil nil ((8 . 14) (#("rand" 0 4 (fontified nil)) . -8) (8 . 12) (#("random" 0 6 (fontified t)) . -8) (undo-tree-id1367 . -6) (undo-tree-id1368 . -6) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -2) (undo-tree-id1379 . -2) (undo-tree-id1380 . -2) (undo-tree-id1381 . -2) (undo-tree-id1382 . -2) (undo-tree-id1383 . -2) (undo-tree-id1384 . -2) (undo-tree-id1385 . -3) (undo-tree-id1386 . -3) (undo-tree-id1387 . -3) (undo-tree-id1388 . -3) (undo-tree-id1389 . -3) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -3) (undo-tree-id1394 . -3) (undo-tree-id1395 . -3) (undo-tree-id1396 . -3) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -3) (undo-tree-id1401 . -3) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) (undo-tree-id1406 . -3) (undo-tree-id1407 . -3) (undo-tree-id1408 . -4) (undo-tree-id1409 . -4) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (undo-tree-id1412 . -4) (undo-tree-id1413 . -4) (undo-tree-id1414 . -4) (undo-tree-id1415 . -4) (undo-tree-id1416 . -4) (undo-tree-id1417 . -4) (undo-tree-id1418 . -4) (undo-tree-id1419 . -4) (undo-tree-id1420 . -4) (undo-tree-id1421 . -4) (undo-tree-id1422 . -4) (undo-tree-id1423 . -4) (undo-tree-id1424 . -4) (undo-tree-id1425 . -4) (undo-tree-id1426 . -4) (undo-tree-id1427 . -4) (undo-tree-id1428 . -4) (undo-tree-id1429 . -4) (undo-tree-id1430 . -4) (undo-tree-id1431 . -5) (undo-tree-id1432 . -5) (undo-tree-id1433 . -5) (undo-tree-id1434 . -5) (undo-tree-id1435 . -5) (undo-tree-id1436 . -5) (undo-tree-id1437 . -5) (undo-tree-id1438 . -5) (undo-tree-id1439 . -5) (undo-tree-id1440 . -5) (undo-tree-id1441 . -5) (undo-tree-id1442 . -5) (undo-tree-id1443 . -5) (undo-tree-id1444 . -5) (undo-tree-id1445 . -5) (undo-tree-id1446 . -5) (undo-tree-id1447 . -5) (undo-tree-id1448 . -5) (undo-tree-id1449 . -5) (undo-tree-id1450 . -5) (undo-tree-id1451 . -5) (undo-tree-id1452 . -5) (undo-tree-id1453 . -5) (undo-tree-id1454 . -6) (undo-tree-id1455 . -6) (undo-tree-id1456 . -6) (undo-tree-id1457 . -6) (undo-tree-id1458 . -6) (undo-tree-id1459 . -6) (undo-tree-id1460 . -6) (undo-tree-id1461 . -6) (undo-tree-id1462 . -6) (undo-tree-id1463 . -6) (undo-tree-id1464 . -6) (undo-tree-id1465 . -6) (undo-tree-id1466 . -6) (undo-tree-id1467 . -6) (undo-tree-id1468 . -6) (undo-tree-id1469 . -6) (undo-tree-id1470 . -6) (undo-tree-id1471 . -6) (undo-tree-id1472 . -6) (undo-tree-id1473 . -6) (undo-tree-id1474 . -6) (undo-tree-id1475 . -6) (undo-tree-id1476 . -6) (undo-tree-id1477 . -6) (undo-tree-id1478 . -6) (undo-tree-id1479 . -6) (undo-tree-id1480 . -6) (undo-tree-id1481 . -6) (undo-tree-id1482 . -6) (undo-tree-id1483 . -6) (undo-tree-id1484 . -6) (undo-tree-id1485 . -6) (undo-tree-id1486 . -6) (undo-tree-id1487 . -6) (undo-tree-id1488 . -6) (undo-tree-id1489 . -6) (undo-tree-id1490 . -6) (undo-tree-id1491 . -6) (undo-tree-id1492 . -6) (undo-tree-id1493 . -6) 14) nil (26387 35423 290098 934000) 0 nil])
([nil nil ((565 . 569) (#("    " 0 4 (fontified nil)) . 564) (undo-tree-id1596 . -4) (563 . 569) (t 26387 35423 292972 704000)) nil (26387 35505 873797 273000) 0 nil])
([nil nil ((569 . 588)) nil (26387 35505 873796 381000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 587) (undo-tree-id1595 . -1) 588) nil (26387 35505 873796 81000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -586) (undo-tree-id1594 . -1) 587) nil (26387 35505 873795 380000) 0 nil])
([nil nil ((586 . 587)) nil (26387 35505 873794 87000) 0 nil])
([nil nil ((587 . 588)) nil (26387 35505 873793 927000) 0 nil])
([nil nil ((588 . 597)) nil (26387 35505 873793 747000) 0 nil])
([nil nil ((587 . 594)) nil (26387 35505 873793 506000) 0 nil])
([nil nil ((591 . 594) (#("str" 0 3 (fontified nil)) . -591) (591 . 594) (#("str" 0 3 (face py-builtins-face fontified t)) . -591) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) 594) nil (26387 35505 873792 845000) 0 nil])
([nil nil ((604 . 617)) nil (26387 35505 873791 262000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -615) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (#("s" 0 1 (fontified t)) . -616) (undo-tree-id1589 . -1) 617) nil (26387 35505 873790 500000) 0 nil])
([nil nil ((615 . 624)) nil (26387 35505 873788 817000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -621) (undo-tree-id1582 . -1) (#("p" 0 1 (fontified t)) . -622) (undo-tree-id1583 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -623) (undo-tree-id1584 . -1) 624) nil (26387 35505 873788 56000) 0 nil])
([nil nil ((621 . 642)) nil (26387 35505 873786 12000) 0 nil])
([nil nil ((642 . 652)) nil (26387 35505 873785 561000) 0 nil])
([nil nil ((652 . 662)) nil (26387 35505 873784 699000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -661) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) 662) nil (26387 35505 873783 918000) 0 nil])
([nil nil ((661 . 679)) nil (26387 35505 873782 315000) 0 nil])
([nil nil ((679 . 683)) nil (26387 35505 873781 754000) 0 nil])
([nil nil ((683 . 685)) nil (26387 35505 873781 83000) 0 nil])
([nil nil ((685 . 694)) nil (26387 35505 873780 872000) 0 nil])
([nil nil ((658 . 663)) nil (26387 35505 873780 552000) 0 nil])
([nil nil ((#("shoe" 0 4 (fontified t)) . 663)) nil (26387 35505 873779 830000) 0 nil])
([nil nil ((663 . 667)) nil (26387 35505 873779 339000) 0 nil])
([nil nil ((663 . 667) (#("de" 0 2 (fontified nil)) . -663) (663 . 665) (#("deck" 0 4 (fontified t)) . -663) (undo-tree-id1499 . -4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4) (undo-tree-id1502 . -4) (undo-tree-id1503 . -4) (undo-tree-id1504 . -4) (undo-tree-id1505 . -4) (undo-tree-id1506 . -4) (undo-tree-id1507 . -4) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) (undo-tree-id1516 . -4) (undo-tree-id1517 . -4) (undo-tree-id1518 . -4) (undo-tree-id1519 . -4) (undo-tree-id1520 . -4) (undo-tree-id1521 . -4) (undo-tree-id1522 . -4) (undo-tree-id1523 . -4) (undo-tree-id1524 . -4) (undo-tree-id1525 . -4) (undo-tree-id1526 . -4) (undo-tree-id1527 . -4) (undo-tree-id1528 . -4) (undo-tree-id1529 . -4) (undo-tree-id1530 . -4) (undo-tree-id1531 . -4) (undo-tree-id1532 . -4) (undo-tree-id1533 . -4) (undo-tree-id1534 . -4) (undo-tree-id1535 . -4) (undo-tree-id1536 . -4) (undo-tree-id1537 . -4) (undo-tree-id1538 . -4) (undo-tree-id1539 . -4) (undo-tree-id1540 . -4) (undo-tree-id1541 . -4) (undo-tree-id1542 . -4) (undo-tree-id1543 . -4) (undo-tree-id1544 . -4) (undo-tree-id1545 . -4) (undo-tree-id1546 . -4) (undo-tree-id1547 . -4) (undo-tree-id1548 . -4) (undo-tree-id1549 . -4) (undo-tree-id1550 . -4) (undo-tree-id1551 . -4) (undo-tree-id1552 . -4) (undo-tree-id1553 . -4) (undo-tree-id1554 . -4) (undo-tree-id1555 . -4) (undo-tree-id1556 . -4) (undo-tree-id1557 . -4) (undo-tree-id1558 . -4) (undo-tree-id1559 . -4) (undo-tree-id1560 . -4) (undo-tree-id1561 . -4) (undo-tree-id1562 . -4) (undo-tree-id1563 . -4) (undo-tree-id1564 . -4) (undo-tree-id1565 . -4) (undo-tree-id1566 . -4) (undo-tree-id1567 . -4) (undo-tree-id1568 . -4) (undo-tree-id1569 . -4) (undo-tree-id1570 . -4) (undo-tree-id1571 . -4) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -4) (undo-tree-id1575 . -4) (undo-tree-id1576 . -4) (undo-tree-id1577 . -4) (undo-tree-id1578 . -4) (undo-tree-id1579 . -4) 667) nil (26387 35505 873774 951000) 0 nil])
([nil nil ((699 . 707) (t 26387 35505 882909 495000)) nil (26387 35543 265114 80000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 706) (undo-tree-id1766 . -1) 707) nil (26387 35543 265113 439000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -705) (undo-tree-id1765 . -1) 706) nil (26387 35543 265112 597000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 704) (undo-tree-id1764 . -1) 705) nil (26387 35543 265111 916000) 0 nil])
([nil nil ((704 . 725)) nil (26387 35543 265111 185000) 0 nil])
([nil nil ((725 . 726)) nil (26387 35543 265110 914000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -723) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (#("e" 0 1 (fontified t)) . -724) (undo-tree-id1762 . -1) (#("c" 0 1 (fontified t)) . -725) (undo-tree-id1763 . -1) 726) nil (26387 35543 265110 273000) 0 nil])
([nil nil ((723 . 734)) nil (26387 35543 265107 257000) 0 nil])
([nil nil ((734 . 742)) nil (26387 35543 265107 117000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -740) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (#("0" 0 1 (face py-number-face fontified t)) . -741) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) 742) nil (26387 35543 265106 626000) 0 nil])
([nil nil ((740 . 744)) nil (26387 35543 265104 692000) 0 nil])
([nil nil ((744 . 753)) nil (26387 35543 265104 442000) 0 nil])
([nil nil ((753 . 757)) nil (26387 35543 265104 141000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -753) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (#("h" 0 1 (fontified t)) . -754) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (#("o" 0 1 (fontified t)) . -755) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (#("w" 0 1 (fontified t)) . -756) (undo-tree-id1750 . -1) 757) nil (26387 35543 265103 79000) 0 nil])
([nil nil ((753 . 763)) nil (26387 35543 265095 966000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -762) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) 763) nil (26387 35543 265095 575000) 0 nil])
([nil nil ((762 . 765)) nil (26387 35543 265093 10000) 0 nil])
([nil nil ((763 . 766) (#("dr" 0 2 (fontified nil)) . -763) (763 . 765) (#("dir" 0 3 (fontified nil)) . -763) (763 . 766) (#("dr" 0 2 (fontified t)) . -763) (undo-tree-id1729 . -2) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) 765) nil (26387 35543 265092 18000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 2 3))) . -764) (undo-tree-id1727 . -1) (#("r" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 2 3))) . -765) (undo-tree-id1728 . -1) 766) nil (26387 35543 264840 794000) 0 nil])
([nil nil ((764 . 766)) nil (26387 35543 264839 702000) 0 nil])
([nil nil ((763 . 773) (#("dra" 0 3 (fontified nil)) . -763) (763 . 766) (#("drawn_card" 0 10 (fontified nil)) . -763) (763 . 773) (#("dra" 0 3 (fontified t match-data (0 3 0 1 2 3))) . -763) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) 766) nil (26387 35543 264839 81000) 0 nil])
([nil nil ((773 . 780)) nil (26387 35543 264837 228000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -779) (undo-tree-id1722 . -1) 780) nil (26387 35543 264836 677000) 0 nil])
([nil nil ((779 . 788)) nil (26387 35543 264835 825000) 0 nil])
([nil nil ((788 . 795)) nil (26387 35543 264835 554000) 0 nil])
([nil nil ((795 . 797)) nil (26387 35543 264835 164000) 0 nil])
([nil nil ((795 . 805) (#("dr" 0 2 (fontified nil)) . -795) (795 . 797) (#("drawn_card" 0 10 (fontified nil)) . -795) (795 . 805) (#("dr" 0 2 (fontified t match-data (0 3 0 1 1 2 2 3))) . -795) (undo-tree-id1597 . -2) (undo-tree-id1598 . -2) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -2) (undo-tree-id1667 . -2) (undo-tree-id1668 . -2) (undo-tree-id1669 . -2) (undo-tree-id1670 . -2) (undo-tree-id1671 . -2) (undo-tree-id1672 . -2) (undo-tree-id1673 . -2) (undo-tree-id1674 . -2) (undo-tree-id1675 . -2) (undo-tree-id1676 . -2) (undo-tree-id1677 . -2) (undo-tree-id1678 . -2) (undo-tree-id1679 . -2) (undo-tree-id1680 . -2) (undo-tree-id1681 . -2) (undo-tree-id1682 . -2) (undo-tree-id1683 . -2) (undo-tree-id1684 . -2) (undo-tree-id1685 . -2) (undo-tree-id1686 . -2) (undo-tree-id1687 . -2) (undo-tree-id1688 . -2) (undo-tree-id1689 . -2) (undo-tree-id1690 . -2) (undo-tree-id1691 . -2) (undo-tree-id1692 . -2) (undo-tree-id1693 . -2) (undo-tree-id1694 . -2) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -2) (undo-tree-id1698 . -2) (undo-tree-id1699 . -2) (undo-tree-id1700 . -2) (undo-tree-id1701 . -2) (undo-tree-id1702 . -2) (undo-tree-id1703 . -2) (undo-tree-id1704 . -2) (undo-tree-id1705 . -2) (undo-tree-id1706 . -2) (undo-tree-id1707 . -2) (undo-tree-id1708 . -2) (undo-tree-id1709 . -2) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) (undo-tree-id1715 . -2) (undo-tree-id1716 . -2) (undo-tree-id1717 . -2) (undo-tree-id1718 . -2) (undo-tree-id1719 . -2) (undo-tree-id1720 . -2) (undo-tree-id1721 . -2) 797) nil (26387 35543 264830 254000) 0 nil])
([nil nil ((886 . 891) (t 26387 35543 267343 528000)) nil (26387 35562 622922 742000) 0 nil])
([nil nil ((891 . 900)) nil (26387 35562 622922 461000) 0 nil])
([nil nil ((896 . 904) (#("dr" 0 2 (fontified nil)) . -896) (896 . 898) (#("drawCard" 0 8 (fontified nil)) . -896) (896 . 904) (#("draw" 0 4 (fontified t)) . -896) (undo-tree-id1891 . -4) (undo-tree-id1892 . -4) (undo-tree-id1893 . -4) (undo-tree-id1894 . -4) 900) nil (26387 35562 622921 840000) 0 nil])
([nil nil ((904 . 906)) nil (26387 35562 622920 66000) 0 nil])
([nil nil ((891 . 895)) nil (26387 35562 622919 896000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -892) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (#("i" 0 1 (fontified t)) . -893) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#("n" 0 1 (fontified t)) . -894) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) 895) nil (26387 35562 622919 75000) 0 nil])
([nil nil ((892 . 897)) nil (26387 35562 622913 664000) 0 nil])
([nil nil ((912 . 913)) nil (26387 35562 622913 244000) 0 nil])
([nil nil ((913 . 918)) nil (26387 35562 622912 983000) 0 nil])
([nil nil ((918 . 931)) nil (26387 35562 622912 693000) 0 nil])
([nil nil ((929 . 933) (#("de" 0 2 (fontified nil)) . -929) (929 . 931) (#("deck" 0 4 (fontified nil)) . -929) (929 . 933) (#("de" 0 2 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -929) (undo-tree-id1767 . -2) (undo-tree-id1768 . -2) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2) (undo-tree-id1816 . -2) (undo-tree-id1817 . -2) (undo-tree-id1818 . -2) (undo-tree-id1819 . -2) (undo-tree-id1820 . -2) (undo-tree-id1821 . -2) (undo-tree-id1822 . -2) (undo-tree-id1823 . -2) (undo-tree-id1824 . -2) (undo-tree-id1825 . -2) (undo-tree-id1826 . -2) (undo-tree-id1827 . -2) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -2) (undo-tree-id1834 . -2) (undo-tree-id1835 . -2) (undo-tree-id1836 . -2) (undo-tree-id1837 . -2) (undo-tree-id1838 . -2) (undo-tree-id1839 . -2) (undo-tree-id1840 . -2) (undo-tree-id1841 . -2) (undo-tree-id1842 . -2) (undo-tree-id1843 . -2) (undo-tree-id1844 . -2) (undo-tree-id1845 . -2) (undo-tree-id1846 . -2) (undo-tree-id1847 . -2) (undo-tree-id1848 . -2) (undo-tree-id1849 . -2) (undo-tree-id1850 . -2) (undo-tree-id1851 . -2) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2) (undo-tree-id1854 . -2) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (undo-tree-id1857 . -2) (undo-tree-id1858 . -2) (undo-tree-id1859 . -2) (undo-tree-id1860 . -2) (undo-tree-id1861 . -2) (undo-tree-id1862 . -2) (undo-tree-id1863 . -2) (undo-tree-id1864 . -2) (undo-tree-id1865 . -2) (undo-tree-id1866 . -2) (undo-tree-id1867 . -2) (undo-tree-id1868 . -2) (undo-tree-id1869 . -2) (undo-tree-id1870 . -2) (undo-tree-id1871 . -2) (undo-tree-id1872 . -2) (undo-tree-id1873 . -2) (undo-tree-id1874 . -2) (undo-tree-id1875 . -2) (undo-tree-id1876 . -2) (undo-tree-id1877 . -2) (undo-tree-id1878 . -2) 931) nil (26387 35562 622909 957000) 0 nil])
([nil nil ((933 . 934)) nil (26387 35562 622845 696000) 0 nil])
([nil nil ((1 . 2) (t 26387 35562 625570 495000)) nil (26387 35785 927607 775000) 0 nil])
([nil nil ((#("dimport random


class Shoe:
    def __init__(self, num_decks: int = 1):
        self.deck = self.createDeck(num_decks)

    def createDeck(self, num_decks: int) -> dict[str, int]:
        cards_per_deck = {
            'two': 4, 'three': 4, 'four': 4, 'five': 4, 
            'six': 4, 'seven': 4, 'eight': 4, 'nine': 4,
            'ten': 16, 'jack': 4, 'queen': 4, 'king': 4, 'ace': 4
        }

        # Multiply the number of cards by the number of decks
        shoe = {card: count * num_decks for card, count in cards_per_deck.items()}
        return shoe

    def drawCard(self) -> str:
        cards, counts = zip(*[(card,count) for card, count in self.deck.items() if count > 0])
        drawn_card = random.choices(cards, counts)[0]
        self.deck[drawn_card] -= 1
        return drawn_card
            


if __name__ == \"__main__\":
    test = Shoe()
    print(test.deck)
    print(test.drawCard())
    print(test.deck)
    
" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t) 8 14 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6)) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 22 (face py-def-class-face fontified t) 22 23 (fontified t) 23 27 (face py-class-name-face fontified t) 27 29 (fontified t) 29 33 (fontified t) 33 36 (face py-def-class-face fontified t) 36 37 (fontified t) 37 45 (face py-def-face fontified t) 45 46 (face (rainbow-delimiters-depth-1-face) fontified t) 46 50 (face py-object-reference-face fontified t) 50 52 (fontified t) 52 63 (fontified t) 63 66 (face py-builtins-face fontified t) 66 69 (fontified t) 69 70 (face py-number-face fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 73 (fontified t) 73 81 (fontified t) 81 85 (face py-object-reference-face fontified t) 85 86 (fontified t) 86 90 (face py-variable-name-face fontified t) 90 91 (fontified t) 91 92 (face font-lock-operator-face fontified t) 92 93 (fontified t) 93 97 (face py-object-reference-face fontified t) 97 98 (fontified t) 98 108 (fontified t match-data (0 3 0 1 1 2 2 3)) 108 109 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 109 118 (fontified t match-data (0 3 0 1 1 2 2 3)) 118 119 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 119 120 (fontified t) 120 121 (fontified t) 121 125 (fontified t) 125 128 (face py-def-class-face fontified t) 128 129 (fontified t) 129 139 (face py-def-face fontified t) 139 140 (face (rainbow-delimiters-depth-1-face) fontified t) 140 144 (face py-object-reference-face fontified t) 144 157 (fontified t) 157 160 (face py-builtins-face fontified t) 160 161 (face (rainbow-delimiters-depth-1-face) fontified t) 161 165 (fontified t) 165 169 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 169 170 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 170 173 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3)) 173 175 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 175 178 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 178 179 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 179 181 (fontified t) 181 189 (fontified t) 189 203 (face py-variable-name-face fontified t) 203 204 (fontified t) 204 205 (face font-lock-operator-face fontified t) 205 206 (fontified t) 206 207 (face (rainbow-delimiters-depth-1-face) fontified t) 207 208 (fontified t) 208 220 (fontified t) 220 225 (face font-lock-string-face fontified t) 225 227 (fontified t) 227 228 (face py-number-face fontified t) 228 230 (fontified t) 230 237 (face font-lock-string-face fontified t) 237 239 (fontified t) 239 240 (face py-number-face fontified t) 240 242 (fontified t) 242 248 (face font-lock-string-face fontified t) 248 250 (fontified t) 250 251 (face py-number-face fontified t) 251 253 (fontified t) 253 259 (face font-lock-string-face fontified t) 259 261 (fontified t) 261 262 (face py-number-face fontified t) 262 265 (fontified t) 265 277 (fontified t) 277 282 (face font-lock-string-face fontified t) 282 284 (fontified t) 284 285 (face py-number-face fontified t) 285 287 (fontified t) 287 294 (face font-lock-string-face fontified t) 294 296 (fontified t) 296 297 (face py-number-face fontified t) 297 299 (fontified t) 299 306 (face font-lock-string-face fontified t) 306 308 (fontified t) 308 309 (face py-number-face fontified t) 309 311 (fontified t) 311 317 (face font-lock-string-face fontified t) 317 319 (fontified t) 319 320 (face py-number-face fontified t) 320 322 (fontified t) 322 334 (fontified t) 334 339 (face font-lock-string-face fontified t) 339 341 (fontified t) 341 343 (face py-number-face fontified t) 343 345 (fontified t) 345 351 (face font-lock-string-face fontified t) 351 353 (fontified t) 353 354 (face py-number-face fontified t) 354 356 (fontified t) 356 363 (face font-lock-string-face fontified t) 363 365 (fontified t) 365 366 (face py-number-face fontified t) 366 368 (fontified t) 368 374 (face font-lock-string-face fontified t) 374 376 (fontified t) 376 377 (face py-number-face fontified t) 377 379 (fontified t) 379 384 (face font-lock-string-face fontified t) 384 386 (fontified t) 386 387 (face py-number-face fontified t) 387 388 (fontified t) 388 396 (fontified t) 396 397 (face (rainbow-delimiters-depth-1-face) fontified t) 397 398 (fontified t) 398 399 (fontified t) 399 407 (fontified t) 407 409 (face font-lock-comment-face fontified t) 409 461 (face font-lock-comment-face fontified t) 461 469 (fontified t) 469 473 (face py-variable-name-face fontified t) 473 474 (fontified t) 474 475 (face font-lock-operator-face fontified t) 475 476 (fontified t) 476 477 (face (rainbow-delimiters-depth-1-face) fontified t) 477 501 (fontified t) 501 504 (face font-lock-keyword-face fontified t) 504 517 (fontified t) 517 519 (face font-lock-keyword-face fontified t) 519 540 (fontified t) 540 541 (face (rainbow-delimiters-depth-2-face) fontified t) 541 542 (face (rainbow-delimiters-depth-2-face) fontified t) 542 543 (face (rainbow-delimiters-depth-1-face) fontified t) 543 544 (fontified t rear-nonsticky t) 544 552 (fontified t) 552 558 (face font-lock-keyword-face fontified t) 558 564 (fontified t) 564 565 (fontified t) 565 569 (fontified t) 569 572 (face py-def-class-face fontified t) 572 573 (fontified t) 573 581 (face py-def-face fontified t) 581 582 (face (rainbow-delimiters-depth-1-face) fontified t) 582 586 (face py-object-reference-face fontified t) 586 587 (face (rainbow-delimiters-depth-1-face) fontified t) 587 591 (fontified t) 591 594 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3)) 594 596 (fontified t) 596 604 (fontified t) 604 609 (face py-variable-name-face fontified t) 609 611 (fontified t) 611 617 (face py-variable-name-face fontified t) 617 618 (fontified t) 618 619 (face font-lock-operator-face fontified t) 619 620 (fontified t) 620 623 (face py-builtins-face fontified t) 623 624 (face (rainbow-delimiters-depth-1-face) fontified t) 624 625 (fontified t) 625 626 (face (rainbow-delimiters-depth-2-face) fontified t) 626 627 (face (rainbow-delimiters-depth-3-face) fontified t) 627 637 (fontified t) 637 638 (face (rainbow-delimiters-depth-3-face) fontified t) 638 639 (fontified t) 639 642 (face font-lock-keyword-face fontified t) 642 655 (fontified t) 655 657 (face font-lock-keyword-face fontified t) 657 658 (fontified t) 658 662 (face py-object-reference-face fontified t) 662 663 (fontified t) 663 667 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 667 673 (fontified t) 673 674 (face (rainbow-delimiters-depth-3-face) fontified t) 674 675 (face (rainbow-delimiters-depth-3-face) fontified t) 675 676 (fontified t) 676 678 (face font-lock-keyword-face fontified t) 678 687 (fontified t) 687 688 (face py-number-face fontified t) 688 689 (face (rainbow-delimiters-depth-2-face) fontified t) 689 690 (face (rainbow-delimiters-depth-1-face) fontified t) 690 691 (fontified t) 691 699 (fontified t) 699 709 (face py-variable-name-face fontified t) 709 710 (fontified t) 710 711 (face font-lock-operator-face fontified t) 711 726 (fontified t) 726 727 (face (rainbow-delimiters-depth-1-face) fontified t) 727 740 (fontified t) 740 741 (face (rainbow-delimiters-depth-1-face) fontified t) 741 742 (face (rainbow-delimiters-depth-1-face) fontified t) 742 743 (face py-number-face fontified t) 743 744 (face (rainbow-delimiters-depth-1-face) fontified t) 744 745 (fontified t) 745 753 (fontified t) 753 757 (face py-object-reference-face fontified t) 757 758 (fontified t) 758 762 (face py-variable-name-face fontified t) 762 763 (face (rainbow-delimiters-depth-1-face) fontified t) 763 773 (fontified t match-data (0 3 0 1 1 2 2 3)) 773 774 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 774 775 (fontified t match-data (0 3 0 1 1 2 2 3)) 775 777 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3)) 777 778 (fontified t match-data (0 3 0 1 1 2 2 3)) 778 779 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 779 780 (fontified t match-data (0 3 0 1 1 2 2 3)) 780 788 (fontified t match-data (0 3 0 1 1 2 2 3)) 788 794 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3)) 794 795 (fontified t match-data (0 3 0 1 1 2 2 3)) 795 805 (fontified t match-data (0 2 0 1 1 2)) 805 806 (fontified t match-data (0 3 0 1 1 2 2 3)) 806 818 (fontified t match-data (0 3 0 1 1 2 2 3)) 818 819 (fontified t) 819 820 (fontified t) 820 821 (fontified t) 821 823 (face font-lock-keyword-face fontified t) 823 824 (fontified t) 824 832 (face py-builtins-face fontified t) 832 836 (fontified t) 836 837 (face font-lock-string-face fontified t) 837 846 (face font-lock-string-face fontified t) 846 848 (fontified t) 848 852 (fontified t) 852 856 (face py-variable-name-face fontified t) 856 857 (fontified t) 857 858 (face font-lock-operator-face fontified t) 858 863 (fontified t) 863 864 (face (rainbow-delimiters-depth-1-face) fontified t) 864 865 (face (rainbow-delimiters-depth-1-face) fontified t) 865 866 (fontified t) 866 870 (fontified t) 870 875 (face py-builtins-face fontified t) 875 876 (face (rainbow-delimiters-depth-1-face) fontified t) 876 885 (fontified t) 885 886 (face (rainbow-delimiters-depth-1-face) fontified t) 886 887 (fontified t) 887 891 (fontified t) 891 896 (face py-builtins-face fontified t) 896 897 (face (rainbow-delimiters-depth-1-face) fontified t) 897 902 (fontified t) 902 910 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 910 911 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 911 912 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 912 913 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 913 914 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 914 918 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 918 923 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 923 924 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 924 929 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 929 933 (fontified t match-data (0 2 0 1 1 2)) 933 934 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 2 0 1 1 2)) 934 935 (fontified t) 935 939 (fontified t) 939 940 (fontified t)) . 1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -940) (undo-tree-id1898 . -46) (undo-tree-id1899 . -73) (undo-tree-id1900 . -181) (undo-tree-id1901 . -169) (undo-tree-id1902 . -169) (undo-tree-id1903 . -181) (undo-tree-id1904 . -818) (undo-tree-id1905 . -46) (undo-tree-id1906 . -181) (undo-tree-id1907 . -818) (undo-tree-id1908 . -181) (undo-tree-id1909 . -222) (undo-tree-id1910 . -279) (undo-tree-id1911 . -336) (undo-tree-id1912 . -924) (undo-tree-id1913 . -189) (undo-tree-id1914 . -934) (undo-tree-id1915 . -940) (undo-tree-id1916 . -794) (undo-tree-id1917 . 939) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -886) (undo-tree-id2077 . -886) (undo-tree-id2078 . -886) (undo-tree-id2079 . -886) (undo-tree-id2080 . -886) (undo-tree-id2081 . -886) (undo-tree-id2082 . -886) (undo-tree-id2083 . -886) (undo-tree-id2084 . -886) (undo-tree-id2085 . -886) (undo-tree-id2086 . -886) (undo-tree-id2087 . -886) (undo-tree-id2088 . -886) (undo-tree-id2089 . -886) (undo-tree-id2090 . -886) (undo-tree-id2091 . -886) (undo-tree-id2092 . -886) (undo-tree-id2093 . -886) (undo-tree-id2094 . -886) (undo-tree-id2095 . -886) (undo-tree-id2096 . -886) (undo-tree-id2097 . -886) (undo-tree-id2098 . -886) (undo-tree-id2099 . -886) (undo-tree-id2100 . -886) (undo-tree-id2101 . -886) (undo-tree-id2102 . -886) (undo-tree-id2103 . -886) (undo-tree-id2104 . -886) (undo-tree-id2105 . -886) (undo-tree-id2106 . -886) (undo-tree-id2107 . -886) (undo-tree-id2108 . -886) (undo-tree-id2109 . -886) (undo-tree-id2110 . -886) (undo-tree-id2111 . -886) (undo-tree-id2112 . -886) (undo-tree-id2113 . -886) (undo-tree-id2114 . -886) (undo-tree-id2115 . -886) (undo-tree-id2116 . -886) (undo-tree-id2117 . -886) (undo-tree-id2118 . -886) (undo-tree-id2119 . -886) (undo-tree-id2120 . -886) (undo-tree-id2121 . -886) (undo-tree-id2122 . -886) (undo-tree-id2123 . -886) (undo-tree-id2124 . -886) (undo-tree-id2125 . -886) (undo-tree-id2126 . -886) (undo-tree-id2127 . -886) (undo-tree-id2128 . -886) (undo-tree-id2129 . -886) (undo-tree-id2130 . -886) (undo-tree-id2131 . -886) (undo-tree-id2132 . -886) (undo-tree-id2133 . -886) (undo-tree-id2134 . -886) (undo-tree-id2135 . -886) (undo-tree-id2136 . -886) (undo-tree-id2137 . -886) (undo-tree-id2138 . -940) (undo-tree-id2139 . -886) (undo-tree-id2140 . -1)) nil (26387 35785 927604 318000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1090 . 1091) (nil fontified nil 1 . 1091) (1 . 1091)) nil (26387 35785 927079 437000) 0 nil])
([nil nil ((965 . 969) (#("    " 0 4 (fontified nil)) . 964) (undo-tree-id2190 . -4) (963 . 969) (t 26387 35785 930281 475000)) nil (26387 46091 939491 124000) 0 nil])
([nil nil ((969 . 990)) nil (26387 46091 939490 402000) 0 nil])
([nil nil ((990 . 994)) nil (26387 46091 939490 252000) 0 nil])
([nil nil ((990 . 994) (#("Boo" 0 3 (fontified nil)) . -990) (990 . 993) (#("bool" 0 4 (fontified nil)) . -990) (990 . 994) (#("Bool" 0 4 (fontified t)) . -990) (undo-tree-id2186 . -4) (undo-tree-id2187 . -4) (undo-tree-id2188 . -4) (undo-tree-id2189 . -4) 994) nil (26387 46091 939489 501000) 0 nil])
([nil nil ((994 . 995)) nil (26387 46091 939487 467000) 0 nil])
([nil nil ((995 . 1004)) nil (26387 46091 939487 96000) 0 nil])
([nil nil ((1004 . 1025)) nil (26387 46091 939486 785000) 0 nil])
([nil nil ((1025 . 1026)) nil (26387 46091 939486 555000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1022) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (#("a" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1023) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (#("r" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1024) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1025) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) 1026) nil (26387 46091 939485 613000) 0 nil])
([nil nil ((1022 . 1036)) nil (26387 46091 939477 557000) 0 nil])
([nil nil ((1036 . 1039)) nil (26387 46091 939477 407000) 0 nil])
([nil nil ((1039 . 1040)) nil (26387 46091 939477 56000) 0 nil])
([nil nil ((1040 . 1053)) nil (26387 46091 939476 706000) 0 nil])
([nil nil ((#("card" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1008)) nil (26387 46091 939476 215000) 0 nil])
([nil nil ((1008 . 1009)) nil (26387 46091 939475 804000) 0 nil])
([nil nil ((1050 . 1055)) nil (26387 46091 939475 163000) 0 nil])
([nil nil ((1055 . 1067)) nil (26387 46091 939474 932000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1066) (undo-tree-id2169 . -1) 1067) nil (26387 46091 939474 481000) 0 nil])
([nil nil ((1066 . 1067)) nil (26387 46091 939473 830000) 0 nil])
([nil nil ((1067 . 1068)) nil (26387 46091 939473 560000) 0 nil])
([nil nil ((#("for _,count in self.deck.items():
            if sum(count) > 0:" 0 3 (face font-lock-keyword-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 3 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 4 5 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 5 12 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 12 14 (face font-lock-keyword-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 14 15 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 15 19 (face py-object-reference-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 19 30 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 32 34 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 34 46 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 46 48 (face font-lock-keyword-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 48 49 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 49 52 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 52 53 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 53 58 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 59 62 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 62 63 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 63 64 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1004) (undo-tree-id2164 . -53) (undo-tree-id2165 . -58) (undo-tree-id2166 . -58) (undo-tree-id2167 . -64) (undo-tree-id2168 . -58)) nil (26387 46091 939472 628000) 0 nil])
([nil nil ((1004 . 1015)) nil (26387 46091 939470 654000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1014) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) 1015) nil (26387 46091 939470 143000) 0 nil])
([nil nil ((1014 . 1034)) nil (26387 46091 939469 61000) 0 nil])
([nil nil ((1034 . 1035)) nil (26387 46091 939468 610000) 0 nil])
([nil nil ((1035 . 1048)) nil (26387 46091 939468 310000) 0 nil])
([nil nil ((1048 . 1050)) nil (26387 46091 939468 69000) 0 nil])
([nil nil ((1050 . 1057)) nil (26387 46091 939467 909000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1056) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) 1057) nil (26387 46091 939467 468000) 0 nil])
([nil nil ((1056 . 1060)) nil (26387 46091 939462 879000) 0 nil])
([nil nil ((1055 . 1060) (#("fal" 0 3 (fontified nil)) . -1055) (1055 . 1058) (#("False" 0 5 (fontified nil)) . -1055) (1055 . 1060) (#("false" 0 5 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -1055) (undo-tree-id2154 . -5) (undo-tree-id2155 . -5) (undo-tree-id2156 . -5) (undo-tree-id2157 . -5) 1060) nil (26387 46091 939461 957000) 0 nil])
([nil nil ((1060 . 1069)) nil (26387 46091 939459 663000) 0 nil])
([nil nil ((1069 . 1080)) nil (26387 46091 939459 322000) 0 nil])
([nil nil ((1076 . 1080) (#("Tru" 0 3 (fontified nil)) . -1076) (1076 . 1079) (#("True" 0 4 (face py-pseudo-keyword-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1076) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -3) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) 1080) nil (26387 46091 939455 575000) 0 nil])
([nil nil ((995 . 1004) (t 26387 46091 943029 272000)) nil (26387 46289 280423 286000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1000) (undo-tree-id2268 . -4) 1004) nil (26387 46289 280422 765000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -996) (undo-tree-id2267 . -4) 1000) nil (26387 46289 280421 603000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -995) (undo-tree-id2266 . -1) 996) nil (26387 46289 280420 691000) 0 nil])
([nil nil ((#("import random


class Shoe:
    def __init__(self, num_decks: int = 1):
        self.deck = self.createDeck(num_decks)

    def createDeck(self, num_decks: int) -> dict[str, int]:
        cards_per_deck = {
            '2': 4, '3': 4, '4': 4, '5': 4, 
            '6': 4, '7': 4, '8': 4, '9': 4,
            '10': 16, 'A': 4  # 10 includes ten, jack, queen, king
        }

        # Multiply the number of cards by the number of decks
        shoe = {card: count * num_decks for card, count in cards_per_deck.items()}
        return shoe

    def drawCard(self) -> str:
        # Only consider cards with non-zero count
        cards, counts = zip(*[(card, count) for card, count in self.deck.items() if count > 0])
        
        # Randomly choose a card based on remaining counts
        drawn_card = random.choices(cards, counts)[0]
        
        # Reduce the count of the drawn card
        self.deck[drawn_card] -= 1
        
        return drawn_card

    def isEmpty(self) -> bool:
        if sum(self.deck.values()) > 0:
            return False
        return True


if __name__ == \"__main__\":
    test = Shoe(num_decks=2)
    print(test.deck)
    print(test.drawCard())
    print(test.deck)
" 0 6 (face py-import-from-face fontified t) 6 16 (fontified t) 16 21 (face py-def-class-face fontified t) 21 22 (fontified t) 22 26 (face py-class-name-face fontified t) 26 32 (fontified t) 32 35 (face py-def-class-face fontified t) 35 36 (fontified t) 36 44 (face py-def-face fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 49 (face py-object-reference-face fontified t) 49 62 (fontified t) 62 65 (face py-builtins-face fontified t) 65 68 (fontified t) 68 69 (face py-number-face fontified t) 69 70 (face (rainbow-delimiters-depth-1-face) fontified t) 70 80 (fontified t) 80 84 (face py-object-reference-face fontified t) 84 85 (fontified t) 85 89 (face py-variable-name-face fontified t) 89 90 (fontified t) 90 91 (face font-lock-operator-face fontified t) 91 92 (fontified t) 92 96 (face py-object-reference-face fontified t) 96 107 (fontified t) 107 108 (face (rainbow-delimiters-depth-1-face) fontified t) 108 117 (fontified t) 117 118 (face (rainbow-delimiters-depth-1-face) fontified t) 118 124 (fontified t) 124 127 (face py-def-class-face fontified t) 127 128 (fontified t) 128 138 (face py-def-face fontified t) 138 139 (face (rainbow-delimiters-depth-1-face) fontified t) 139 143 (face py-object-reference-face fontified t) 143 156 (fontified t) 156 159 (face py-builtins-face fontified t) 159 160 (face (rainbow-delimiters-depth-1-face) fontified t) 160 164 (fontified t) 164 168 (face py-builtins-face fontified t) 168 169 (face (rainbow-delimiters-depth-1-face) fontified t) 169 172 (face py-builtins-face fontified t) 172 174 (fontified t) 174 177 (face py-builtins-face fontified t) 177 178 (face (rainbow-delimiters-depth-1-face) fontified t) 178 188 (fontified t) 188 202 (face py-variable-name-face fontified t) 202 203 (fontified t) 203 204 (face font-lock-operator-face fontified t) 204 205 (fontified t) 205 206 (face (rainbow-delimiters-depth-1-face) fontified t) 206 219 (fontified t) 219 222 (face font-lock-string-face fontified t) 222 224 (fontified t) 224 225 (face py-number-face fontified t) 225 227 (fontified t) 227 230 (face font-lock-string-face fontified t) 230 232 (fontified t) 232 233 (face py-number-face fontified t) 233 235 (fontified t) 235 238 (face font-lock-string-face fontified t) 238 240 (fontified t) 240 241 (face py-number-face fontified t) 241 243 (fontified t) 243 246 (face font-lock-string-face fontified t) 246 248 (fontified t) 248 249 (face py-number-face fontified t) 249 264 (fontified t) 264 267 (face font-lock-string-face fontified t) 267 269 (fontified t) 269 270 (face py-number-face fontified t) 270 272 (fontified t) 272 275 (face font-lock-string-face fontified t) 275 277 (fontified t) 277 278 (face py-number-face fontified t) 278 280 (fontified t) 280 283 (face font-lock-string-face fontified t) 283 285 (fontified t) 285 286 (face py-number-face fontified t) 286 288 (fontified t) 288 291 (face font-lock-string-face fontified t) 291 293 (fontified t) 293 294 (face py-number-face fontified t) 294 308 (fontified t) 308 312 (face font-lock-string-face fontified t) 312 314 (fontified t) 314 316 (face py-number-face fontified t) 316 318 (fontified t) 318 321 (face font-lock-string-face fontified t) 321 323 (fontified t) 323 324 (face py-number-face fontified t) 324 326 (fontified t) 326 363 (face font-lock-comment-face fontified t) 363 371 (fontified t) 371 372 (face (rainbow-delimiters-depth-1-face) fontified t) 372 382 (fontified t) 382 436 (face font-lock-comment-face fontified t) 436 444 (fontified t) 444 448 (face py-variable-name-face fontified t) 448 449 (fontified t) 449 450 (face font-lock-operator-face fontified t) 450 451 (fontified t) 451 452 (face (rainbow-delimiters-depth-1-face) fontified t) 452 476 (fontified t) 476 479 (face font-lock-keyword-face fontified t) 479 492 (fontified t) 492 494 (face font-lock-keyword-face fontified t) 494 515 (fontified t) 515 516 (face (rainbow-delimiters-depth-2-face) fontified t) 516 517 (face (rainbow-delimiters-depth-2-face) fontified t) 517 518 (face (rainbow-delimiters-depth-1-face) fontified t) 518 527 (fontified t) 527 533 (face font-lock-keyword-face fontified t) 533 544 (fontified t) 544 547 (face py-def-class-face fontified t) 547 548 (fontified t) 548 556 (face py-def-face fontified t) 556 557 (face (rainbow-delimiters-depth-1-face) fontified t) 557 561 (face py-object-reference-face fontified t) 561 562 (face (rainbow-delimiters-depth-1-face) fontified t) 562 566 (fontified t) 566 569 (face py-builtins-face fontified t) 569 579 (fontified t) 579 621 (face font-lock-comment-face fontified t) 621 629 (fontified t) 629 634 (face py-variable-name-face fontified t) 634 636 (fontified t) 636 642 (face py-variable-name-face fontified t) 642 643 (fontified t) 643 644 (face font-lock-operator-face fontified t) 644 645 (fontified t) 645 648 (face py-builtins-face fontified t) 648 649 (face (rainbow-delimiters-depth-1-face) fontified t) 649 650 (fontified t) 650 651 (face (rainbow-delimiters-depth-2-face) fontified t) 651 652 (face (rainbow-delimiters-depth-3-face) fontified t) 652 663 (fontified t) 663 664 (face (rainbow-delimiters-depth-3-face) fontified t) 664 665 (fontified t) 665 668 (face font-lock-keyword-face fontified t) 668 681 (fontified t) 681 683 (face font-lock-keyword-face fontified t) 683 684 (fontified t) 684 688 (face py-object-reference-face fontified t) 688 699 (fontified t) 699 700 (face (rainbow-delimiters-depth-3-face) fontified t) 700 701 (face (rainbow-delimiters-depth-3-face) fontified t) 701 702 (fontified t) 702 704 (face font-lock-keyword-face fontified t) 704 713 (fontified t) 713 714 (face py-number-face fontified t) 714 715 (face (rainbow-delimiters-depth-2-face) fontified t) 715 716 (face (rainbow-delimiters-depth-1-face) fontified t) 716 734 (fontified t) 734 785 (face font-lock-comment-face fontified t) 785 793 (fontified t) 793 803 (face py-variable-name-face fontified t) 803 804 (fontified t) 804 805 (face font-lock-operator-face fontified t) 805 820 (fontified t) 820 821 (face (rainbow-delimiters-depth-1-face) fontified t) 821 834 (fontified t) 834 835 (face (rainbow-delimiters-depth-1-face) fontified t) 835 836 (face (rainbow-delimiters-depth-1-face) fontified t) 836 837 (face py-number-face fontified t) 837 838 (face (rainbow-delimiters-depth-1-face) fontified t) 838 856 (fontified t) 856 893 (face font-lock-comment-face fontified t) 893 901 (fontified t) 901 905 (face py-object-reference-face fontified t) 905 906 (fontified t) 906 910 (face py-variable-name-face fontified t) 910 911 (face (rainbow-delimiters-depth-1-face) fontified t) 911 921 (fontified t) 921 922 (face (rainbow-delimiters-depth-1-face) fontified t) 922 923 (fontified t) 923 925 (face font-lock-operator-face fontified t) 925 926 (fontified t) 926 927 (face py-number-face fontified t) 927 937 (fontified t) 937 945 (fontified t) 945 951 (face font-lock-keyword-face fontified t) 951 963 (fontified t) 963 964 (fontified t) 964 968 (fontified t) 968 971 (face py-def-class-face fontified t) 971 972 (fontified t) 972 979 (face py-def-face fontified t) 979 980 (face (rainbow-delimiters-depth-1-face) fontified t) 980 984 (face py-object-reference-face fontified t) 984 985 (face (rainbow-delimiters-depth-1-face) fontified t) 985 989 (fontified t) 989 993 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 993 994 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 994 995 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 995 1003 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1003 1005 (face font-lock-keyword-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1005 1006 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1006 1009 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1009 1010 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1010 1014 (face py-object-reference-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1014 1026 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1026 1027 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1027 1028 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1028 1029 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1029 1032 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1032 1033 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1033 1035 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1035 1047 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1047 1053 (face font-lock-keyword-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1053 1054 (fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1054 1059 (face py-pseudo-keyword-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 1059 1060 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 1060 1068 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 1068 1074 (face font-lock-keyword-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 1074 1075 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 1075 1079 (face py-pseudo-keyword-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 1079 1080 (fontified t) 1080 1082 (fontified t) 1082 1084 (face font-lock-keyword-face fontified t) 1084 1085 (fontified t) 1085 1093 (face py-builtins-face fontified t) 1093 1097 (fontified t) 1097 1107 (face font-lock-string-face fontified t) 1107 1113 (fontified t) 1113 1117 (face py-variable-name-face fontified t) 1117 1118 (fontified t) 1118 1119 (face font-lock-operator-face fontified t) 1119 1124 (fontified t) 1124 1125 (face (rainbow-delimiters-depth-1-face) fontified t) 1125 1135 (fontified t) 1135 1136 (face py-number-face fontified t) 1136 1137 (face (rainbow-delimiters-depth-1-face) fontified t) 1137 1142 (fontified t) 1142 1147 (face py-builtins-face fontified t) 1147 1148 (face (rainbow-delimiters-depth-1-face) fontified t) 1148 1157 (fontified t) 1157 1158 (face (rainbow-delimiters-depth-1-face) fontified t) 1158 1163 (fontified t) 1163 1168 (face py-builtins-face fontified t) 1168 1169 (face (rainbow-delimiters-depth-1-face) fontified t) 1169 1182 (fontified t) 1182 1183 (face (rainbow-delimiters-depth-2-face) fontified t) 1183 1184 (face (rainbow-delimiters-depth-2-face) fontified t) 1184 1185 (face (rainbow-delimiters-depth-1-face) fontified t) 1185 1190 (fontified t) 1190 1195 (face py-builtins-face fontified t) 1195 1196 (face (rainbow-delimiters-depth-1-face) fontified t) 1196 1205 (fontified t) 1205 1206 (face (rainbow-delimiters-depth-1-face) fontified t) 1206 1207 (fontified t rear-nonsticky t)) . 1) (undo-tree-id2191 . -1075) (undo-tree-id2192 . -1075) (undo-tree-id2193 . -1075) (undo-tree-id2194 . -1207) (undo-tree-id2195 . -1010) (undo-tree-id2196 . -1003) (undo-tree-id2197 . -994) (undo-tree-id2198 . -1079) (undo-tree-id2199 . -1079) (undo-tree-id2200 . -1079) (undo-tree-id2201 . -1079) (undo-tree-id2202 . -1079) (undo-tree-id2203 . -1079) (undo-tree-id2204 . -1079) (undo-tree-id2205 . -1079) (undo-tree-id2206 . -1079) (undo-tree-id2207 . -1079) (undo-tree-id2208 . -1079) (undo-tree-id2209 . -1079) (undo-tree-id2210 . -1079) (undo-tree-id2211 . -1079) (undo-tree-id2212 . -1079) (undo-tree-id2213 . -1079) (undo-tree-id2214 . -1079) (undo-tree-id2215 . -1079) (undo-tree-id2216 . -1079) (undo-tree-id2217 . -1079) (undo-tree-id2218 . -1079) (undo-tree-id2219 . -1079) (undo-tree-id2220 . -1079) (undo-tree-id2221 . -1079) (undo-tree-id2222 . -1079) (undo-tree-id2223 . -1079) (undo-tree-id2224 . -1079) (undo-tree-id2225 . -1079) (undo-tree-id2226 . -1079) (undo-tree-id2227 . -1079) (undo-tree-id2228 . -1079) (undo-tree-id2229 . -1079) (undo-tree-id2230 . -1079) (undo-tree-id2231 . -1079) (undo-tree-id2232 . -1079) (undo-tree-id2233 . -1079) (undo-tree-id2234 . -1079) (undo-tree-id2235 . -1079) (undo-tree-id2236 . -1079) (undo-tree-id2237 . -1079) (undo-tree-id2238 . -1079) (undo-tree-id2239 . -1079) (undo-tree-id2240 . -1079) (undo-tree-id2241 . -1079) (undo-tree-id2242 . -1079) (undo-tree-id2243 . -1079) (undo-tree-id2244 . -1079) (undo-tree-id2245 . -1079) (undo-tree-id2246 . -1079) (undo-tree-id2247 . -1079) (undo-tree-id2248 . -1079) (undo-tree-id2249 . -1079) (undo-tree-id2250 . -1079) (undo-tree-id2251 . -1079) (undo-tree-id2252 . -1079) (undo-tree-id2253 . -1079) (undo-tree-id2254 . -1079) (undo-tree-id2255 . -1079) (undo-tree-id2256 . -1079) (undo-tree-id2257 . -1079) (undo-tree-id2258 . -1079) (undo-tree-id2259 . -1079) (undo-tree-id2260 . -1079) (undo-tree-id2261 . -1079) (undo-tree-id2262 . -1079) (undo-tree-id2263 . -1207) (undo-tree-id2264 . -1079) (undo-tree-id2265 . -1075)) nil (26387 46289 280415 642000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3367 . 3368) (nil fontified nil 1 . 3368) (1 . 3368)) nil (26387 46289 280348 235000) 0 nil])
([nil nil ((3368 . 3372) (t 26387 46289 285110 760000)) nil (26387 46315 967212 689000) 0 nil])
([nil nil ((3372 . 3376)) nil (26387 46315 967212 98000) 0 nil])
([nil nil ((#("    test" 0 8 (fontified t)) . 3368) (undo-tree-id2269 . -4) (undo-tree-id2270 . -8) (undo-tree-id2271 . -8) (undo-tree-id2272 . -8) (undo-tree-id2273 . -8) (undo-tree-id2274 . -8) (undo-tree-id2275 . -8) (undo-tree-id2276 . -8) (undo-tree-id2277 . -8) (undo-tree-id2278 . -8) (undo-tree-id2279 . -8) (undo-tree-id2280 . -8) (undo-tree-id2281 . -8) (undo-tree-id2282 . -8) (undo-tree-id2283 . -8) (undo-tree-id2284 . -8) (undo-tree-id2285 . -8) (undo-tree-id2286 . -8) (undo-tree-id2287 . -8) (undo-tree-id2288 . -8) (undo-tree-id2289 . -8) (undo-tree-id2290 . -8) (undo-tree-id2291 . -8) (undo-tree-id2292 . -8) (undo-tree-id2293 . -8) (undo-tree-id2294 . -8) (undo-tree-id2295 . -8) (undo-tree-id2296 . -8) (undo-tree-id2297 . -8) (undo-tree-id2298 . -8) (undo-tree-id2299 . -8) (undo-tree-id2300 . -8) (undo-tree-id2301 . -8) (undo-tree-id2302 . -8) (undo-tree-id2303 . -8) (undo-tree-id2304 . -8) (undo-tree-id2305 . -8) (undo-tree-id2306 . -8) (undo-tree-id2307 . -8) (undo-tree-id2308 . -8) (undo-tree-id2309 . -8) (undo-tree-id2310 . -8) (undo-tree-id2311 . -8) (undo-tree-id2312 . -8) (undo-tree-id2313 . -8) (undo-tree-id2314 . -8) (undo-tree-id2315 . -8) (undo-tree-id2316 . -8) (undo-tree-id2317 . -8) (undo-tree-id2318 . -8) (undo-tree-id2319 . -8) (undo-tree-id2320 . -8) (undo-tree-id2321 . -8) (undo-tree-id2322 . -8) (undo-tree-id2323 . -8) (undo-tree-id2324 . -8) (undo-tree-id2325 . -8) (undo-tree-id2326 . -8) (undo-tree-id2327 . -8) (undo-tree-id2328 . -8) (undo-tree-id2329 . -8) (undo-tree-id2330 . -8) (undo-tree-id2331 . -8) (undo-tree-id2332 . -8) (undo-tree-id2333 . -8) (undo-tree-id2334 . -8) (undo-tree-id2335 . -8) (undo-tree-id2336 . -8) (undo-tree-id2337 . -8) (undo-tree-id2338 . -8) (undo-tree-id2339 . -8) (undo-tree-id2340 . -8) (undo-tree-id2341 . -8) (undo-tree-id2342 . -8) (undo-tree-id2343 . -8) (undo-tree-id2344 . -8) (undo-tree-id2345 . -8) (undo-tree-id2346 . -8) (undo-tree-id2347 . -8) (undo-tree-id2348 . -8) (undo-tree-id2349 . -8) (undo-tree-id2350 . -8) (undo-tree-id2351 . -8) (undo-tree-id2352 . -8) (undo-tree-id2353 . -8) (undo-tree-id2354 . -8) (undo-tree-id2355 . -8) (undo-tree-id2356 . -8) (undo-tree-id2357 . -8) (undo-tree-id2358 . -8) (undo-tree-id2359 . -8) (undo-tree-id2360 . -8) (undo-tree-id2361 . -8) (undo-tree-id2362 . -8) (undo-tree-id2363 . -8) (undo-tree-id2364 . -8) (undo-tree-id2365 . -8) (undo-tree-id2366 . -8) (undo-tree-id2367 . -8) (undo-tree-id2368 . -8) (undo-tree-id2369 . -8) (undo-tree-id2370 . -8) (undo-tree-id2371 . -8) (undo-tree-id2372 . -8) (undo-tree-id2373 . -8) (undo-tree-id2374 . -8) (undo-tree-id2375 . -8) (undo-tree-id2376 . -8) (undo-tree-id2377 . -8) (undo-tree-id2378 . -8) (undo-tree-id2379 . -8) (undo-tree-id2380 . -8) (undo-tree-id2381 . -8) (undo-tree-id2382 . -8) (undo-tree-id2383 . -8) (undo-tree-id2384 . -8) (undo-tree-id2385 . -8) (undo-tree-id2386 . -8) (undo-tree-id2387 . -8) (undo-tree-id2388 . -8) (undo-tree-id2389 . -8) (undo-tree-id2390 . -8) (undo-tree-id2391 . -8) (undo-tree-id2392 . -8) (undo-tree-id2393 . -8) (undo-tree-id2394 . -8) (undo-tree-id2395 . -8) (undo-tree-id2396 . -8) (undo-tree-id2397 . -8) (undo-tree-id2398 . -8) (undo-tree-id2399 . -8) (undo-tree-id2400 . -8) (undo-tree-id2401 . -8) (undo-tree-id2402 . -8) (undo-tree-id2403 . -8) (undo-tree-id2404 . -8) (undo-tree-id2405 . -8) (undo-tree-id2406 . -8) (undo-tree-id2407 . -8) (undo-tree-id2408 . -8) (undo-tree-id2409 . -8) (undo-tree-id2410 . -8) (undo-tree-id2411 . -8) (undo-tree-id2412 . -8) (undo-tree-id2413 . -8) (undo-tree-id2414 . -8) (undo-tree-id2415 . -8) (undo-tree-id2416 . -8) (undo-tree-id2417 . -8) (undo-tree-id2418 . -8) (undo-tree-id2419 . -8) (undo-tree-id2420 . -8) (undo-tree-id2421 . -8) (undo-tree-id2422 . -8) (undo-tree-id2423 . -8) (undo-tree-id2424 . -8) (undo-tree-id2425 . -8) (undo-tree-id2426 . -8) (undo-tree-id2427 . -8) (undo-tree-id2428 . -8)) nil (26387 46315 967200 496000) 0 nil])
([nil nil ((3069 . 3073) (#("    " 0 4 (fontified nil)) . 3068) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) (undo-tree-id2483 . -4) (undo-tree-id2484 . -4) (undo-tree-id2485 . -4) (undo-tree-id2486 . -4) (undo-tree-id2487 . -4) (undo-tree-id2488 . -4) (undo-tree-id2489 . -4) (undo-tree-id2490 . -4) (undo-tree-id2491 . -4) (undo-tree-id2492 . -4) (undo-tree-id2493 . -4) (undo-tree-id2494 . -4) (undo-tree-id2495 . -4) (undo-tree-id2496 . -4) (undo-tree-id2497 . -4) (undo-tree-id2498 . -4) (undo-tree-id2499 . -4) (undo-tree-id2500 . -4) (undo-tree-id2501 . -4) (undo-tree-id2502 . -4) (undo-tree-id2503 . -4) (undo-tree-id2504 . -4) (undo-tree-id2505 . -4) (undo-tree-id2506 . -4) (undo-tree-id2507 . -4) (undo-tree-id2508 . -4) (undo-tree-id2509 . -4) (undo-tree-id2510 . -4) (undo-tree-id2511 . -4) (undo-tree-id2512 . -4) (undo-tree-id2513 . -4) (undo-tree-id2514 . -4) (undo-tree-id2515 . -4) (undo-tree-id2516 . -4) (undo-tree-id2517 . -4) (3067 . 3073) (t 26387 46315 970260 955000)) nil (26387 46405 324725 303000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3347 . 3348) (nil fontified nil 3073 . 3348) (3073 . 3348)) nil (26387 46405 324700 267000) 0 nil])
([nil nil ((3348 . 3349) (3348 . 3349) (3348 . 3349)) nil (26387 46405 324699 816000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3348) (#("
" 0 1 (fontified t)) . 3348) (#("
" 0 1 (fontified t)) . 3348)) nil (26387 46405 324698 674000) 0 nil])
([nil nil ((3069 . 3073) (#("        " 0 4 (fontified t) 4 8 (fontified t)) . 3069) (undo-tree-id2429 . -4) (undo-tree-id2430 . -4) (undo-tree-id2431 . -4) (undo-tree-id2432 . -4) (undo-tree-id2433 . -4) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -4) (undo-tree-id2442 . -4) (undo-tree-id2443 . -4) (undo-tree-id2444 . -4) (undo-tree-id2445 . -4) (undo-tree-id2446 . -4) (undo-tree-id2447 . -4) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) 3096) nil (26387 46405 324694 466000) 0 nil])
([nil nil ((3644 . 3649) (t 26387 46405 436781 732000)) nil (26387 46415 720372 378000) 0 nil])
([nil nil ((3649 . 3650)) nil (26387 46415 720372 27000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -3649) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) 3650) nil (26387 46415 720371 666000) 0 nil])
([nil nil ((#("print(test.deck)          # Print the deck after drawing a card" 0 5 (face py-builtins-face fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-1-face) fontified t) 16 26 (fontified t) 26 63 (face font-lock-comment-face fontified t)) . 3581) (undo-tree-id2658 . -63)) nil (26387 46415 720369 653000) 0 nil])
([nil nil ((3581 . 3590)) nil (26387 46415 720368 751000) 0 nil])
([nil nil ((3586 . 3594) (#("sh" 0 2 (fontified nil)) . -3586) (3586 . 3588) (#("showShoe" 0 8 (fontified nil)) . -3586) (3586 . 3594) (#("show" 0 4 (fontified t)) . -3586) (undo-tree-id2518 . -4) (undo-tree-id2519 . -4) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -2) (undo-tree-id2552 . -2) (undo-tree-id2553 . -2) (undo-tree-id2554 . -2) (undo-tree-id2555 . -2) (undo-tree-id2556 . -2) (undo-tree-id2557 . -2) (undo-tree-id2558 . -2) (undo-tree-id2559 . -2) (undo-tree-id2560 . -2) (undo-tree-id2561 . -2) (undo-tree-id2562 . -2) (undo-tree-id2563 . -2) (undo-tree-id2564 . -2) (undo-tree-id2565 . -2) (undo-tree-id2566 . -2) (undo-tree-id2567 . -2) (undo-tree-id2568 . -2) (undo-tree-id2569 . -2) (undo-tree-id2570 . -2) (undo-tree-id2571 . -2) (undo-tree-id2572 . -2) (undo-tree-id2573 . -2) (undo-tree-id2574 . -2) (undo-tree-id2575 . -2) (undo-tree-id2576 . -2) (undo-tree-id2577 . -2) (undo-tree-id2578 . -2) (undo-tree-id2579 . -2) (undo-tree-id2580 . -2) (undo-tree-id2581 . -2) (undo-tree-id2582 . -2) (undo-tree-id2583 . -2) (undo-tree-id2584 . -2) (undo-tree-id2585 . -2) (undo-tree-id2586 . -2) (undo-tree-id2587 . -2) (undo-tree-id2588 . -2) (undo-tree-id2589 . -2) (undo-tree-id2590 . -2) (undo-tree-id2591 . -2) (undo-tree-id2592 . -2) (undo-tree-id2593 . -2) (undo-tree-id2594 . -2) (undo-tree-id2595 . -2) (undo-tree-id2596 . -2) (undo-tree-id2597 . -2) (undo-tree-id2598 . -2) (undo-tree-id2599 . -2) (undo-tree-id2600 . -2) (undo-tree-id2601 . -2) (undo-tree-id2602 . -2) (undo-tree-id2603 . -3) (undo-tree-id2604 . -3) (undo-tree-id2605 . -3) (undo-tree-id2606 . -3) (undo-tree-id2607 . -3) (undo-tree-id2608 . -3) (undo-tree-id2609 . -3) (undo-tree-id2610 . -3) (undo-tree-id2611 . -3) (undo-tree-id2612 . -3) (undo-tree-id2613 . -3) (undo-tree-id2614 . -3) (undo-tree-id2615 . -3) (undo-tree-id2616 . -3) (undo-tree-id2617 . -3) (undo-tree-id2618 . -3) (undo-tree-id2619 . -3) (undo-tree-id2620 . -3) (undo-tree-id2621 . -3) (undo-tree-id2622 . -3) (undo-tree-id2623 . -3) (undo-tree-id2624 . -3) (undo-tree-id2625 . -3) (undo-tree-id2626 . -4) (undo-tree-id2627 . -4) (undo-tree-id2628 . -4) (undo-tree-id2629 . -4) (undo-tree-id2630 . -4) (undo-tree-id2631 . -4) (undo-tree-id2632 . -4) (undo-tree-id2633 . -4) (undo-tree-id2634 . -4) (undo-tree-id2635 . -4) (undo-tree-id2636 . -4) (undo-tree-id2637 . -4) (undo-tree-id2638 . -4) (undo-tree-id2639 . -4) (undo-tree-id2640 . -4) (undo-tree-id2641 . -4) (undo-tree-id2642 . -4) (undo-tree-id2643 . -4) (undo-tree-id2644 . -4) (undo-tree-id2645 . -4) (undo-tree-id2646 . -4) (undo-tree-id2647 . -4) (undo-tree-id2648 . -4) (undo-tree-id2649 . -4) (undo-tree-id2650 . -4) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -4) (undo-tree-id2654 . -4) (undo-tree-id2655 . -4) (undo-tree-id2656 . -4) (undo-tree-id2657 . -4) 3590) nil (26387 46415 720366 66000) 0 nil])
([nil nil ((3594 . 3596)) nil (26387 46415 719898 734000) 0 nil])
([nil nil ((3316 . 3317) (t 26387 46415 724667 964000)) nil (26387 46481 416411 286000) 0 nil])
([nil nil ((3317 . 3319)) nil (26387 46481 416406 457000) 0 nil])
([nil nil ((3244 . 3253) (t 26387 46481 421379 284000)) nil (26387 46617 807070 868000) 0 nil])
([nil nil ((3253 . 3254)) nil (26387 46617 807070 297000) 0 nil])
([nil nil ((3254 . 3255)) nil (26387 46617 807069 967000) 0 nil])
([nil nil ((3255 . 3269)) nil (26387 46617 807069 666000) 0 nil])
([nil nil ((3269 . 3290)) nil (26387 46617 807069 446000) 0 nil])
([nil nil ((3290 . 3298)) nil (26387 46617 807069 155000) 0 nil])
([nil nil ((3298 . 3307)) nil (26387 46617 807068 845000) 0 nil])
([nil nil ((3307 . 3322)) nil (26387 46617 807068 604000) 0 nil])
([nil nil ((3421 . 3422)) nil (26387 46617 807068 203000) 0 nil])
([nil nil ((3422 . 3425)) nil (26387 46617 807067 722000) 0 nil])
([nil nil ((3425 . 3436)) nil (26387 46617 807055 710000) 0 nil])
([nil nil ((3368 . 3381) (t 26387 46617 811229 463000)) nil (26387 46735 888392 567000) 0 nil])
([nil nil ((3381 . 3387)) nil (26387 46735 888392 217000) 0 nil])
([nil nil ((#("'█' * coun" 0 10 (face font-lock-string-face fontified t)) . 3420) (undo-tree-id2713 . -10) 3430) nil (26387 46735 888391 676000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3396 . 3397) (nil fontified nil 3387 . 3397) (3387 . 3397)) nil (26387 46735 888391 15000) 0 nil])
([nil nil ((3397 . 3398)) nil (26387 46735 888390 604000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . 3431)) nil (26387 46735 888390 293000) 0 nil])
([nil nil ((3431 . 3436)) nil (26387 46735 888389 682000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-string-face fontified t)) . -3434) (undo-tree-id2711 . -1) (#(";" 0 1 (face font-lock-string-face fontified t)) . -3435) (undo-tree-id2712 . -1) 3436) nil (26387 46735 888388 941000) 0 nil])
([nil nil ((3434 . 3435)) nil (26387 46735 888387 658000) 0 nil])
([nil nil ((3435 . 3451)) nil (26387 46736 885295 467000) 0 nil])
([nil nil ((#("count_width" 0 11 (face font-lock-string-face fontified t)) . -3463) (undo-tree-id2730 . -11) (undo-tree-id2731 . -11) (undo-tree-id2732 . -11) (undo-tree-id2733 . -11) (undo-tree-id2734 . -11) (undo-tree-id2735 . -11) (undo-tree-id2736 . -11) (undo-tree-id2737 . -11) (undo-tree-id2738 . -11) (undo-tree-id2739 . -11) (undo-tree-id2740 . -11) (undo-tree-id2741 . -11) (undo-tree-id2742 . -11) (undo-tree-id2743 . -11) (undo-tree-id2744 . -11) (undo-tree-id2745 . -11) (undo-tree-id2746 . -11) (undo-tree-id2747 . -11) (undo-tree-id2748 . -11) (undo-tree-id2749 . -11) (undo-tree-id2750 . -11) (undo-tree-id2751 . -11) (undo-tree-id2752 . -11) (undo-tree-id2753 . -11) (undo-tree-id2754 . -11) (undo-tree-id2755 . -11) (undo-tree-id2756 . -11) (undo-tree-id2757 . -11) (undo-tree-id2758 . -11) (undo-tree-id2759 . -11) (undo-tree-id2760 . -11) (undo-tree-id2761 . -11) (undo-tree-id2762 . -11) (undo-tree-id2763 . -11) (undo-tree-id2764 . -11) (undo-tree-id2765 . -11) (undo-tree-id2766 . -11) (undo-tree-id2767 . -11) (undo-tree-id2768 . -11) (undo-tree-id2769 . -11) (undo-tree-id2770 . -11) (undo-tree-id2771 . -11) (undo-tree-id2772 . -11) (undo-tree-id2773 . -11) (undo-tree-id2774 . -11) (undo-tree-id2775 . -11) (undo-tree-id2776 . -11) (undo-tree-id2777 . -11) (undo-tree-id2778 . -11) (undo-tree-id2779 . -11) (undo-tree-id2780 . -11) (undo-tree-id2781 . -11) (undo-tree-id2782 . -11) (undo-tree-id2783 . -11) (undo-tree-id2784 . -11) (undo-tree-id2785 . -11) (undo-tree-id2786 . -11) (undo-tree-id2787 . -11) (undo-tree-id2788 . -11) (undo-tree-id2789 . -11) (undo-tree-id2790 . -11) (undo-tree-id2791 . -11) (undo-tree-id2792 . -11) (undo-tree-id2793 . -11) (undo-tree-id2794 . -11) (undo-tree-id2795 . -11) (undo-tree-id2796 . -11) (undo-tree-id2797 . -11) (undo-tree-id2798 . -11) (undo-tree-id2799 . -11) (undo-tree-id2800 . -11) (undo-tree-id2801 . -11) (undo-tree-id2802 . -11) (undo-tree-id2803 . -11) (undo-tree-id2804 . -11) (undo-tree-id2805 . -11) (undo-tree-id2806 . -11) (undo-tree-id2807 . -11) (undo-tree-id2808 . -11) (undo-tree-id2809 . -11) (undo-tree-id2810 . -11) (undo-tree-id2811 . -11) (undo-tree-id2812 . -11) (undo-tree-id2813 . -11) (undo-tree-id2814 . -11) (undo-tree-id2815 . -11) (undo-tree-id2816 . -11) (undo-tree-id2817 . -11) (undo-tree-id2818 . -11) (undo-tree-id2819 . -11) (undo-tree-id2820 . -11) (undo-tree-id2821 . -11) (undo-tree-id2822 . -11) (undo-tree-id2823 . -11) (undo-tree-id2824 . -11) (undo-tree-id2825 . -11) (undo-tree-id2826 . -11) (undo-tree-id2827 . -11) (undo-tree-id2828 . -11) (undo-tree-id2829 . -11) (undo-tree-id2830 . -11) (undo-tree-id2831 . -11) (undo-tree-id2832 . -11) (undo-tree-id2833 . -11) (undo-tree-id2834 . -11) (undo-tree-id2835 . -11) 3474) nil (26387 46747 930609 49000) 0 nil] [nil nil ((#("count:>{count_width" 0 19 (face font-lock-string-face fontified t)) . -3455) (undo-tree-id2663 . -5) (undo-tree-id2664 . -19) (undo-tree-id2665 . -19) (undo-tree-id2666 . -19) (undo-tree-id2667 . -19) (undo-tree-id2668 . -19) (undo-tree-id2669 . -19) (undo-tree-id2670 . -19) (undo-tree-id2671 . -19) (undo-tree-id2672 . -19) (undo-tree-id2673 . -19) (undo-tree-id2674 . -19) (undo-tree-id2675 . -19) (undo-tree-id2676 . -19) (undo-tree-id2677 . -19) (undo-tree-id2678 . -19) (undo-tree-id2679 . -19) (undo-tree-id2680 . -19) (undo-tree-id2681 . -19) (undo-tree-id2682 . -19) (undo-tree-id2683 . -19) (undo-tree-id2684 . -19) (undo-tree-id2685 . -19) (undo-tree-id2686 . -19) (undo-tree-id2687 . -19) (undo-tree-id2688 . -19) (undo-tree-id2689 . -19) (undo-tree-id2690 . -19) (undo-tree-id2691 . -19) (undo-tree-id2692 . -19) (undo-tree-id2693 . -19) (undo-tree-id2694 . -19) (undo-tree-id2695 . -19) (undo-tree-id2696 . -19) (undo-tree-id2697 . -19) (undo-tree-id2698 . -19) (undo-tree-id2699 . -19) (undo-tree-id2700 . -19) (undo-tree-id2701 . -19) (undo-tree-id2702 . -19) (undo-tree-id2703 . -19) (undo-tree-id2704 . -19) (undo-tree-id2705 . -19) (undo-tree-id2706 . -19) (undo-tree-id2707 . -19) (undo-tree-id2708 . -19) (undo-tree-id2709 . -19) (undo-tree-id2710 . -19) 3474) ((3455 . 3474)) (26387 46735 888383 70000) 0 nil])
([nil nil ((3463 . 3464)) nil (26387 46747 930072 565000) 0 nil])
nil
([nil nil ((#("        count_width = 3" 0 8 (fontified t) 8 19 (face py-variable-name-face fontified t) 19 20 (fontified t) 20 21 (face font-lock-operator-face fontified t) 21 22 (fontified t) 22 23 (face py-number-face fontified t)) . 3299) (undo-tree-id2714 . -23) (undo-tree-id2715 . -23) (undo-tree-id2716 . -23) (undo-tree-id2717 . -23) (undo-tree-id2718 . -23) (undo-tree-id2719 . -23) (undo-tree-id2720 . -23) (undo-tree-id2721 . -23) (undo-tree-id2722 . -23) (undo-tree-id2723 . -23) (undo-tree-id2724 . -23) (undo-tree-id2725 . -23) (undo-tree-id2726 . -23) (undo-tree-id2727 . -23) (undo-tree-id2728 . -23) (undo-tree-id2729 . -23)) nil (26387 46747 930071 924000) 0 nil])
([nil nil ((3299 . 3307)) nil (26387 46747 930053 189000) 0 nil])
([nil nil ((3307 . 3312)) nil (26387 46747 930052 778000) 0 nil])
([nil nil ((3312 . 3325)) nil (26387 46747 930047 789000) 0 nil])
([nil nil ((#("2" 0 1 (face py-number-face fontified t)) . -3323) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) 3324 (t 26387 46747 935835 547000)) nil (26387 46756 57532 438000) 0 nil])
([nil nil ((3323 . 3324)) nil (26387 46756 57501 730000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2520) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (#("0" 0 1 (face py-number-face fontified t)) . -2521) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2522) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) 2523 (t 26387 46756 62947 710000)) nil (26388 21513 348364 158000) 0 nil])
([nil nil ((2615 . 2618)) nil (26388 21513 348361 52000) 0 nil])
([nil nil ((2491 . 2492)) nil (26388 21513 348360 601000) 0 nil])
([nil nil ((2521 . 2530)) nil (26388 21513 348360 311000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2526) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (#("a" 0 1 (fontified t)) . -2527) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (#("n" 0 1 (fontified t)) . -2528) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (#("d" 0 1 (fontified t)) . -2529) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) 2530) nil (26388 21513 348359 299000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2525) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) 2526) nil (26388 21513 348350 993000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2524) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) 2525) nil (26388 21513 348347 947000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2491) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) 2492) nil (26388 21513 348342 66000) 0 nil])
([nil current ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2618) (#("0" 0 1 (fontified t)) . 2618) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2618) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (t 26388 21513 353971 249000)) nil (26388 21518 592775 663000) 0 nil])
nil
